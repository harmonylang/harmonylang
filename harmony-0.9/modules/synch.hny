import list;
import bag;

def tas(lk):
    atomic:
        result = !lk;
        !lk = True;
    ;
;
def BinSema(acquired):
    result = acquired;
;
def Lock():
    result = BinSema(False);
;
def acquire(binsema):
    await not tas(binsema);
;
def release(binsema):
    atomic:
        assert !binsema;
        !binsema = False;
    ;
;
def Condition(lk):
    result = bag.empty();
;
def wait(c, lk):
    let blocked, cnt = True, 0:
        atomic:
            cnt = bag.count(!c, nametag());
            bag.add(c, nametag());
            !lk = False;
        ;
        while blocked:
            atomic:
                if (not !lk) and (bag.count(!c, nametag()) <= cnt):
                    !lk = True;
                    blocked = False;
                ;
            ;
        ;
    ;
;
def notify(c):
    atomic:
        if !c != bag.empty():
            bag.remove(c, bag.bchoose(!c));
        ;
    ;
;
def notifyAll(c):
    !c = bag.empty();
;
def Semaphore(cnt):
    result = cnt;
;
def P(sema):
    let blocked = True:
        while blocked:
            atomic:
                if !sema > 0:
                    !sema -= 1;
                    blocked = False;
                ;
            ;
        ;
    ;
;
def V(sema):
    atomic:
        !sema += 1;
    ;
;
def Queue():
    result = [];
;
def dequeue(q):
    let blocked = True:
        while blocked:
            atomic:
                if !q != []:
                    result = list.head(!q);
                    !q = list.tail(!q);
                    blocked = False;
                ;
            ;
        ;
    ;
;
def enqueue(q, item):
    atomic:
        !q = list.append(!q, item);
    ;
;
