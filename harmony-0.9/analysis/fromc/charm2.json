{
  "issue": "Safety violation",
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "name": "__init__()",
      "microsteps": [
        {
          "shared": { },
          "npc": "1",
          "fp": "4",
          "trace": [
            {
              "pc": "1",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "dict", "value": [] } }
            }
          ],
          "this": { "type": "dict", "value": [] },
          "local": { "result": { "type": "dict", "value": [] } },
          "atomic": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "dict", "value": [] }, { "type": "dict", "value": [] }, { "type": "int", "value": "0" } ],
          "pc": "0"
        },
        {
          "npc": "2",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "1"
        },
        {
          "shared": { "synch": { "type": "dict", "value": [] } },
          "npc": "3",
          "pop": "1",
          "push": [ ],
          "pc": "2"
        },
        {
          "npc": "4",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "3"
        },
        {
          "shared": { "list": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "5",
          "pop": "1",
          "push": [ ],
          "pc": "4"
        },
        {
          "npc": "327",
          "push": [ ],
          "pc": "5"
        },
        {
          "npc": "328",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "327"
        },
        {
          "shared": { "bag": { "type": "dict", "value": [] }, "list": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "329",
          "pop": "1",
          "push": [ ],
          "pc": "328"
        },
        {
          "npc": "822",
          "push": [ ],
          "pc": "329"
        },
        {
          "npc": "823",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "822"
        },
        {
          "npc": "824",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "823"
        },
        {
          "npc": "825",
          "local": { "__set__823": { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, "result": { "type": "dict", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "824"
        },
        {
          "npc": "826",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "825"
        },
        {
          "npc": "827",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "826"
        },
        {
          "npc": "828",
          "pop": "1",
          "push": [ ],
          "pc": "827"
        },
        {
          "npc": "829",
          "local": { "__set__823": { "type": "set", "value": [{ "type": "int", "value": "2" } ] }, "result": { "type": "dict", "value": [] }, "x": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "828"
        },
        {
          "npc": "830",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "829"
        },
        {
          "npc": "831",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "830"
        },
        {
          "npc": "832",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "831"
        },
        {
          "npc": "825",
          "push": [ ],
          "pc": "832"
        },
        {
          "npc": "826",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "825"
        },
        {
          "npc": "827",
          "pop": "1",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "826"
        },
        {
          "npc": "828",
          "pop": "1",
          "push": [ ],
          "pc": "827"
        },
        {
          "npc": "829",
          "local": { "__set__823": { "type": "set", "value": [] }, "result": { "type": "dict", "value": [] }, "x": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "828"
        },
        {
          "npc": "830",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "829"
        },
        {
          "npc": "831",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "830"
        },
        {
          "npc": "832",
          "pop": "3",
          "push": [ { "type": "dict", "value": [{ "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "int", "value": "2" }, "value": { "type": "dict", "value": [] } } ] } ],
          "pc": "831"
        },
        {
          "npc": "825",
          "push": [ ],
          "pc": "832"
        },
        {
          "npc": "826",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "825"
        },
        {
          "npc": "827",
          "pop": "1",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "826"
        },
        {
          "npc": "833",
          "pop": "1",
          "push": [ ],
          "pc": "827"
        },
        {
          "npc": "834",
          "local": { "__set__823": { "type": "set", "value": [] }, "result": { "type": "dict", "value": [] } },
          "push": [ ],
          "pc": "833"
        },
        {
          "npc": "835",
          "local": { "result": { "type": "dict", "value": [] } },
          "push": [ ],
          "pc": "834"
        },
        {
          "shared": { "bag": { "type": "dict", "value": [] }, "buf": { "type": "dict", "value": [{ "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "int", "value": "2" }, "value": { "type": "dict", "value": [] } } ] }, "list": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "836",
          "pop": "1",
          "push": [ ],
          "pc": "835"
        },
        {
          "npc": "837",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "836"
        },
        {
          "shared": { "b_in": { "type": "int", "value": "1" }, "bag": { "type": "dict", "value": [] }, "buf": { "type": "dict", "value": [{ "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "int", "value": "2" }, "value": { "type": "dict", "value": [] } } ] }, "list": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "838",
          "pop": "1",
          "push": [ ],
          "pc": "837"
        },
        {
          "npc": "839",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "838"
        },
        {
          "shared": { "b_in": { "type": "int", "value": "1" }, "b_out": { "type": "int", "value": "1" }, "bag": { "type": "dict", "value": [] }, "buf": { "type": "dict", "value": [{ "key": { "type": "int", "value": "1" }, "value": { "type": "dict", "value": [] } }, { "key": { "type": "int", "value": "2" }, "value": { "type": "dict", "value": [] } } ] }, "list": { "type": "dict", "value": [] }, "synch": { "type": "dict", "value": [] } },
          "npc": "840",
          "pop": "1",
          "push": [ ],
          "pc": "839"
        },
        {
          "npc": "841",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "840"
        },
        {
          "npc": "841",
          "failure": "Load: unknown variable",
          "mode": "failed",
          "push": [ ],
          "pc": "841"
        }
      ],
      "invfails": [
      ],
      "contexts": [
        {
          "tid": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "841",
          "fp": "4",
          "trace": [
            {
              "pc": "841",
              "method": "__init__()",
              "calltype": "process",
              "vars": { "result": { "type": "dict", "value": [] } }
            }
          ],
          "failure": "Load: unknown variable",
          "atomic": "1",
          "mode": "failed",
          "this": { "type": "dict", "value": [] }
        }
      ]
    }
  ],
  "code": [
    "Frame __init__ ()",
    "Push ()",
    "Store synch",
    "Push ()",
    "Store list",
    "Jump 327",
    "Frame subseq (s, b, e)",
    "Push 0",
    "StoreVar __size__7",
    "Push ()",
    "LoadVar b",
    "LoadVar e",
    "Push 1",
    "2-ary -",
    "2-ary ..",
    "StoreVar __set__10",
    "LoadVar __set__10",
    "1-ary IsEmpty",
    "JumpCond True 27",
    "Cut(__set__10, x)",
    "LoadVar __size__7",
    "LoadVar x",
    "LoadVar s",
    "Apply",
    "3-ary DictAdd",
    "IncVar __size__7",
    "Jump 16",
    "DelVar x",
    "DelVar __set__10",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame append (s, e)",
    "LoadVar s",
    "Push ()",
    "Push 0",
    "LoadVar e",
    "3-ary DictAdd",
    "2-ary +",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame head s",
    "Push 0",
    "LoadVar s",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame tail s",
    "Push ()",
    "Push 0",
    "LoadVar s",
    "3-ary DictAdd",
    "Push 1",
    "Push 1",
    "3-ary DictAdd",
    "Push 2",
    "LoadVar s",
    "1-ary len",
    "3-ary DictAdd",
    "Push PC(6)",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame sum a",
    "Push 0",
    "StoreVar result",
    "LoadVar a",
    "StoreVar __set__69",
    "LoadVar __set__69",
    "1-ary IsEmpty",
    "JumpCond True 80",
    "Cut(__set__69, v)",
    "LoadVar result",
    "LoadVar v",
    "2-ary +",
    "StoreVar result",
    "Jump 71",
    "DelVar v",
    "DelVar __set__69",
    "Return",
    "Jump 327",
    "Frame set a",
    "Push {}",
    "LoadVar a",
    "StoreVar __set__86",
    "LoadVar __set__86",
    "1-ary IsEmpty",
    "JumpCond True 95",
    "Cut(__set__86, v)",
    "LoadVar v",
    "2-ary SetAdd",
    "Jump 88",
    "DelVar v",
    "DelVar __set__86",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame list a",
    "Push 0",
    "StoreVar __size__101",
    "Push ()",
    "LoadVar a",
    "StoreVar __set__104",
    "LoadVar __set__104",
    "1-ary IsEmpty",
    "JumpCond True 115",
    "Cut(__set__104, v)",
    "LoadVar __size__101",
    "LoadVar v",
    "3-ary DictAdd",
    "IncVar __size__101",
    "Jump 106",
    "DelVar v",
    "DelVar __set__104",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame values d",
    "Push 0",
    "StoreVar __size__121",
    "Push ()",
    "LoadVar d",
    "1-ary keys",
    "StoreVar __set__124",
    "LoadVar __set__124",
    "1-ary IsEmpty",
    "JumpCond True 138",
    "Cut(__set__124, k)",
    "LoadVar __size__121",
    "LoadVar k",
    "LoadVar d",
    "Apply",
    "3-ary DictAdd",
    "IncVar __size__121",
    "Jump 127",
    "DelVar k",
    "DelVar __set__124",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame items d",
    "Push 0",
    "StoreVar __size__144",
    "Push ()",
    "LoadVar d",
    "1-ary keys",
    "StoreVar __set__147",
    "LoadVar __set__147",
    "1-ary IsEmpty",
    "JumpCond True 167",
    "Cut(__set__147, k)",
    "LoadVar __size__144",
    "Push ()",
    "Push 0",
    "LoadVar k",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar k",
    "LoadVar d",
    "Apply",
    "3-ary DictAdd",
    "3-ary DictAdd",
    "IncVar __size__144",
    "Jump 150",
    "DelVar k",
    "DelVar __set__147",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame enumerate d",
    "Push ()",
    "StoreVar result",
    "Push 0",
    "StoreVar index",
    "LoadVar d",
    "1-ary keys",
    "StoreVar __set__177",
    "LoadVar __set__177",
    "1-ary IsEmpty",
    "JumpCond True 204",
    "Cut(__set__177, k)",
    "LoadVar result",
    "Push ()",
    "Push 0",
    "Push ()",
    "Push 0",
    "LoadVar index",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar k",
    "LoadVar d",
    "Apply",
    "3-ary DictAdd",
    "3-ary DictAdd",
    "2-ary +",
    "StoreVar result",
    "LoadVar index",
    "Push 1",
    "2-ary +",
    "StoreVar index",
    "Jump 180",
    "DelVar k",
    "DelVar __set__177",
    "DelVar index",
    "Return",
    "Jump 327",
    "Frame qsort a",
    "LoadVar a",
    "Push ()",
    "2-ary ==",
    "JumpCond False 217",
    "Push ()",
    "StoreVar result",
    "Jump 287",
    "Push ()",
    "Push 0",
    "LoadVar a",
    "Push PC(42)",
    "Apply",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar a",
    "Push PC(49)",
    "Apply",
    "3-ary DictAdd",
    "StoreVar (pivot, rest)",
    "Push 0",
    "StoreVar __size__229",
    "Push ()",
    "LoadVar rest",
    "StoreVar __set__232",
    "LoadVar __set__232",
    "1-ary IsEmpty",
    "JumpCond True 247",
    "Cut(__set__232, v)",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary <",
    "JumpCond False 234",
    "LoadVar __size__229",
    "LoadVar v",
    "3-ary DictAdd",
    "IncVar __size__229",
    "Jump 234",
    "DelVar v",
    "DelVar __set__232",
    "StoreVar lower",
    "Push 0",
    "StoreVar __size__250",
    "Push ()",
    "LoadVar rest",
    "StoreVar __set__253",
    "LoadVar __set__253",
    "1-ary IsEmpty",
    "JumpCond True 268",
    "Cut(__set__253, v)",
    "LoadVar v",
    "LoadVar pivot",
    "2-ary >=",
    "JumpCond False 255",
    "LoadVar __size__250",
    "LoadVar v",
    "3-ary DictAdd",
    "IncVar __size__250",
    "Jump 255",
    "DelVar v",
    "DelVar __set__253",
    "StoreVar higher",
    "LoadVar lower",
    "Push PC(209)",
    "Apply",
    "Push ()",
    "Push 0",
    "LoadVar pivot",
    "3-ary DictAdd",
    "LoadVar higher",
    "Push PC(209)",
    "Apply",
    "3-ary +",
    "StoreVar result",
    "DelVar pivot",
    "DelVar rest",
    "DelVar lower",
    "DelVar higher",
    "Return",
    "Jump 327",
    "Frame sorted d",
    "LoadVar d",
    "Push PC(100)",
    "Apply",
    "Push PC(209)",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 327",
    "Frame reversed d",
    "LoadVar d",
    "1-ary len",
    "StoreVar n",
    "Push 0",
    "StoreVar __size__302",
    "Push ()",
    "Push 1",
    "LoadVar n",
    "2-ary ..",
    "StoreVar __set__305",
    "LoadVar __set__305",
    "1-ary IsEmpty",
    "JumpCond True 322",
    "Cut(__set__305, i)",
    "LoadVar __size__302",
    "LoadVar n",
    "LoadVar i",
    "2-ary -",
    "LoadVar d",
    "Apply",
    "3-ary DictAdd",
    "IncVar __size__302",
    "Jump 309",
    "DelVar i",
    "DelVar __set__305",
    "StoreVar result",
    "DelVar n",
    "Return",
    "Push ()",
    "Store bag",
    "Jump 822",
    "Frame empty ()",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame fromSet s",
    "Push ()",
    "LoadVar s",
    "StoreVar __set__337",
    "LoadVar __set__337",
    "1-ary IsEmpty",
    "JumpCond True 347",
    "Cut(__set__337, elt)",
    "LoadVar elt",
    "Push 1",
    "3-ary DictAdd",
    "Jump 339",
    "DelVar elt",
    "DelVar __set__337",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame fromList a",
    "Push ()",
    "StoreVar result",
    "LoadVar a",
    "1-ary keys",
    "StoreVar __set__355",
    "LoadVar __set__355",
    "1-ary IsEmpty",
    "JumpCond True 388",
    "Cut(__set__355, i)",
    "LoadVar i",
    "LoadVar a",
    "Apply",
    "LoadVar result",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 380",
    "Push ?result",
    "LoadVar i",
    "LoadVar a",
    "Apply",
    "Address",
    "Dup",
    "LoadVar",
    "Push 1",
    "2-ary +",
    "StoreVar",
    "Jump 358",
    "Push ?result",
    "LoadVar i",
    "LoadVar a",
    "Apply",
    "Address",
    "Push 1",
    "StoreVar",
    "Jump 358",
    "DelVar i",
    "DelVar __set__355",
    "Return",
    "Jump 822",
    "Frame count (bg, elt)",
    "LoadVar elt",
    "LoadVar bg",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 403",
    "LoadVar elt",
    "LoadVar bg",
    "Apply",
    "StoreVar result",
    "Jump 405",
    "Push 0",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame bchoose bg",
    "ReadonlyInc",
    "AtomicInc",
    "Push 0",
    "Push {}",
    "LoadVar bg",
    "1-ary keys",
    "StoreVar __set__412",
    "LoadVar __set__412",
    "1-ary IsEmpty",
    "JumpCond True 424",
    "Cut(__set__412, k)",
    "LoadVar k",
    "LoadVar bg",
    "Apply",
    "2-ary SetAdd",
    "Jump 415",
    "DelVar k",
    "DelVar __set__412",
    "2-ary in",
    "1-ary not",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar bg",
    "1-ary keys",
    "Choose",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame add (pb, elt)",
    "LoadVar elt",
    "LoadVar pb",
    "Load",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 453",
    "LoadVar pb",
    "LoadVar elt",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "Jump 458",
    "LoadVar pb",
    "LoadVar elt",
    "Address",
    "Push 1",
    "Store",
    "Return",
    "Jump 822",
    "Frame remove (pb, elt)",
    "LoadVar elt",
    "LoadVar pb",
    "Load",
    "1-ary keys",
    "2-ary in",
    "JumpCond False 474",
    "LoadVar elt",
    "LoadVar pb",
    "Load",
    "Apply",
    "Push 0",
    "2-ary >",
    "Jump 475",
    "Push False",
    "JumpCond False 485",
    "LoadVar pb",
    "LoadVar elt",
    "Address",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "Jump 485",
    "LoadVar elt",
    "LoadVar pb",
    "Load",
    "Apply",
    "Push 0",
    "2-ary <=",
    "JumpCond False 497",
    "LoadVar pb",
    "LoadVar elt",
    "Address",
    "Del",
    "Jump 497",
    "Return",
    "Jump 822",
    "Frame tas lk",
    "AtomicInc",
    "LoadVar lk",
    "Load",
    "StoreVar result",
    "LoadVar lk",
    "Push True",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 822",
    "Frame BinSema acquired",
    "LoadVar acquired",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame Lock ()",
    "Push False",
    "Push PC(510)",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame acquired binsema",
    "LoadVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame acquire binsema",
    "LoadVar binsema",
    "Push PC(499)",
    "Apply",
    "JumpCond True 529",
    "Return",
    "Jump 822",
    "Frame release binsema",
    "AtomicInc",
    "ReadonlyInc",
    "AtomicInc",
    "LoadVar binsema",
    "Load",
    "Assert",
    "AtomicDec",
    "ReadonlyDec",
    "LoadVar binsema",
    "Push False",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 822",
    "Frame held binsema",
    "LoadVar binsema",
    "Load",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame Condition lk",
    "Push ()",
    "Push PC(330)",
    "Apply",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame wait (c, lk)",
    "Push ()",
    "Push 0",
    "Push True",
    "3-ary DictAdd",
    "Push 1",
    "Push 0",
    "3-ary DictAdd",
    "Push 2",
    "Push ()",
    "1-ary get_context",
    "3-ary DictAdd",
    "StoreVar (blocked, cnt, ctx)",
    "AtomicInc",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar ctx",
    "3-ary DictAdd",
    "Push PC(392)",
    "Apply",
    "StoreVar cnt",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar ctx",
    "3-ary DictAdd",
    "Push PC(437)",
    "Apply",
    "Pop",
    "LoadVar lk",
    "Push False",
    "Store",
    "AtomicDec",
    "LoadVar blocked",
    "JumpCond False 632",
    "AtomicInc",
    "LoadVar lk",
    "Load",
    "1-ary not",
    "JumpCond False 622",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar ctx",
    "3-ary DictAdd",
    "Push PC(392)",
    "Apply",
    "LoadVar cnt",
    "2-ary <=",
    "Jump 623",
    "Push False",
    "JumpCond False 630",
    "LoadVar lk",
    "Push True",
    "Store",
    "Push False",
    "StoreVar blocked",
    "Jump 630",
    "AtomicDec",
    "Jump 602",
    "DelVar blocked",
    "DelVar cnt",
    "DelVar ctx",
    "Return",
    "Jump 822",
    "Frame notify c",
    "AtomicInc",
    "LoadVar c",
    "Load",
    "Push ()",
    "Push PC(330)",
    "Apply",
    "2-ary !=",
    "JumpCond False 660",
    "Push ()",
    "Push 0",
    "LoadVar c",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar c",
    "Load",
    "Push PC(407)",
    "Apply",
    "3-ary DictAdd",
    "Push PC(460)",
    "Apply",
    "Pop",
    "Jump 660",
    "AtomicDec",
    "Return",
    "Jump 822",
    "Frame notifyAll c",
    "LoadVar c",
    "Push ()",
    "Push PC(330)",
    "Apply",
    "Store",
    "Return",
    "Jump 822",
    "Frame Semaphore cnt",
    "LoadVar cnt",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame P sema",
    "Push True",
    "StoreVar blocked",
    "LoadVar blocked",
    "JumpCond False 698",
    "AtomicInc",
    "LoadVar sema",
    "Load",
    "Push 0",
    "2-ary >",
    "JumpCond False 696",
    "LoadVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary -",
    "Store",
    "Push False",
    "StoreVar blocked",
    "Jump 696",
    "AtomicDec",
    "Jump 679",
    "DelVar blocked",
    "Return",
    "Jump 822",
    "Frame V sema",
    "AtomicInc",
    "LoadVar sema",
    "Dup",
    "Load",
    "Push 1",
    "2-ary +",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 822",
    "Frame Queue ()",
    "Push ()",
    "StoreVar result",
    "Return",
    "Jump 822",
    "Frame get q",
    "Push True",
    "StoreVar blocked",
    "LoadVar blocked",
    "JumpCond False 744",
    "AtomicInc",
    "LoadVar q",
    "Load",
    "Push ()",
    "2-ary !=",
    "JumpCond False 742",
    "LoadVar q",
    "Load",
    "Push PC(42)",
    "Apply",
    "StoreVar result",
    "LoadVar q",
    "LoadVar q",
    "Load",
    "Push PC(49)",
    "Apply",
    "Store",
    "Push False",
    "StoreVar blocked",
    "Jump 742",
    "AtomicDec",
    "Jump 720",
    "DelVar blocked",
    "Return",
    "Jump 822",
    "Frame put (q, item)",
    "AtomicInc",
    "LoadVar q",
    "Push ()",
    "Push 0",
    "LoadVar q",
    "Load",
    "3-ary DictAdd",
    "Push 1",
    "LoadVar item",
    "3-ary DictAdd",
    "Push PC(32)",
    "Apply",
    "Store",
    "AtomicDec",
    "Return",
    "Jump 822",
    "Frame produce item",
    "Push ?n_empty",
    "Load P",
    "Apply",
    "Pop",
    "Push ?l_in",
    "Load P",
    "Apply",
    "Pop",
    "Push ?buf",
    "Load b_in",
    "Address",
    "LoadVar item",
    "Store",
    "Load b_in",
    "Push 2",
    "2-ary %",
    "Push 1",
    "2-ary +",
    "Store b_in",
    "Push ?l_in",
    "Load V",
    "Apply",
    "Pop",
    "Push ?n_full",
    "Load V",
    "Apply",
    "Pop",
    "Return",
    "Jump 822",
    "Frame consume ()",
    "Push ?n_full",
    "Load P",
    "Apply",
    "Pop",
    "Push ?l_out",
    "Load P",
    "Apply",
    "Pop",
    "Load b_out",
    "Load buf",
    "Apply",
    "StoreVar result",
    "Load b_out",
    "Push 2",
    "2-ary %",
    "Push 1",
    "2-ary +",
    "Store b_out",
    "Push ?l_out",
    "Load V",
    "Apply",
    "Pop",
    "Push ?n_empty",
    "Load V",
    "Apply",
    "Pop",
    "Return",
    "Push ()",
    "Push { 1, 2 }",
    "StoreVar __set__823",
    "LoadVar __set__823",
    "1-ary IsEmpty",
    "JumpCond True 833",
    "Cut(__set__823, x)",
    "LoadVar x",
    "Push ()",
    "3-ary DictAdd",
    "Jump 825",
    "DelVar x",
    "DelVar __set__823",
    "Store buf",
    "Push 1",
    "Store b_in",
    "Push 1",
    "Store b_out",
    "Push 1",
    "Load Semaphore",
    "Apply",
    "Store l_in",
    "Push 1",
    "Load Semaphore",
    "Apply",
    "Store l_out",
    "Push 0",
    "Load Semaphore",
    "Apply",
    "Store n_full",
    "Push 2",
    "Load Semaphore",
    "Apply",
    "Store n_empty",
    "Return"
  ],
  "explain": [
    "start of method __init__",
    "push constant ()",
    "pop a value and store it in shared variable synch",
    "push constant ()",
    "pop a value and store it in shared variable list",
    "set program counter to 327",
    "start of method subseq",
    "push constant 0",
    "pop a value and store in __size__7",
    "push constant ()",
    "push the value of b",
    "push the value of e",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in __set__10",
    "push the value of __set__10",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 27 if the value is True",
    "remove smallest element from __set__10 and assign to x",
    "push the value of __size__7",
    "push the value of x",
    "push the value of s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__7",
    "set program counter to 16",
    "delete method variable x",
    "delete method variable __set__10",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method append",
    "push the value of s",
    "push constant ()",
    "push constant 0",
    "push the value of e",
    "pop 3 values and push the result of applying DictAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method head",
    "push constant 0",
    "push the value of s",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method tail",
    "push constant ()",
    "push constant 0",
    "push the value of s",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push the value of s",
    "pop 1 value and push the result of applying len",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(6)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method sum",
    "push constant 0",
    "pop a value and store in result",
    "push the value of a",
    "pop a value and store in __set__69",
    "push the value of __set__69",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 80 if the value is True",
    "remove smallest element from __set__69 and assign to v",
    "push the value of result",
    "push the value of v",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "set program counter to 71",
    "delete method variable v",
    "delete method variable __set__69",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method set",
    "push constant {}",
    "push the value of a",
    "pop a value and store in __set__86",
    "push the value of __set__86",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 95 if the value is True",
    "remove smallest element from __set__86 and assign to v",
    "push the value of v",
    "pop 2 values and push the result of applying SetAdd",
    "set program counter to 88",
    "delete method variable v",
    "delete method variable __set__86",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method list",
    "push constant 0",
    "pop a value and store in __size__101",
    "push constant ()",
    "push the value of a",
    "pop a value and store in __set__104",
    "push the value of __set__104",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 115 if the value is True",
    "remove smallest element from __set__104 and assign to v",
    "push the value of __size__101",
    "push the value of v",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__101",
    "set program counter to 106",
    "delete method variable v",
    "delete method variable __set__104",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method values",
    "push constant 0",
    "pop a value and store in __size__121",
    "push constant ()",
    "push the value of d",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in __set__124",
    "push the value of __set__124",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 138 if the value is True",
    "remove smallest element from __set__124 and assign to k",
    "push the value of __size__121",
    "push the value of k",
    "push the value of d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__121",
    "set program counter to 127",
    "delete method variable k",
    "delete method variable __set__124",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method items",
    "push constant 0",
    "pop a value and store in __size__144",
    "push constant ()",
    "push the value of d",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in __set__147",
    "push the value of __set__147",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 167 if the value is True",
    "remove smallest element from __set__147 and assign to k",
    "push the value of __size__144",
    "push constant ()",
    "push constant 0",
    "push the value of k",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of k",
    "push the value of d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__144",
    "set program counter to 150",
    "delete method variable k",
    "delete method variable __set__147",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method enumerate",
    "push constant ()",
    "pop a value and store in result",
    "push constant 0",
    "pop a value and store in index",
    "push the value of d",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in __set__177",
    "push the value of __set__177",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 204 if the value is True",
    "remove smallest element from __set__177 and assign to k",
    "push the value of result",
    "push constant ()",
    "push constant 0",
    "push constant ()",
    "push constant 0",
    "push the value of index",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of k",
    "push the value of d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop 3 values and push the result of applying DictAdd",
    "pop 2 values and push the result of applying +",
    "pop a value and store in result",
    "push the value of index",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store in index",
    "set program counter to 180",
    "delete method variable k",
    "delete method variable __set__177",
    "delete method variable index",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method qsort",
    "push the value of a",
    "push constant ()",
    "pop 2 values and push the result of applying ==",
    "pop a value and jump to 217 if the value is False",
    "push constant ()",
    "pop a value and store in result",
    "set program counter to 287",
    "push constant ()",
    "push constant 0",
    "push the value of a",
    "push constant PC(42)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of a",
    "push constant PC(49)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in (pivot, rest)",
    "push constant 0",
    "pop a value and store in __size__229",
    "push constant ()",
    "push the value of rest",
    "pop a value and store in __set__232",
    "push the value of __set__232",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 247 if the value is True",
    "remove smallest element from __set__232 and assign to v",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying <",
    "pop a value and jump to 234 if the value is False",
    "push the value of __size__229",
    "push the value of v",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__229",
    "set program counter to 234",
    "delete method variable v",
    "delete method variable __set__232",
    "pop a value and store in lower",
    "push constant 0",
    "pop a value and store in __size__250",
    "push constant ()",
    "push the value of rest",
    "pop a value and store in __set__253",
    "push the value of __set__253",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 268 if the value is True",
    "remove smallest element from __set__253 and assign to v",
    "push the value of v",
    "push the value of pivot",
    "pop 2 values and push the result of applying >=",
    "pop a value and jump to 255 if the value is False",
    "push the value of __size__250",
    "push the value of v",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__250",
    "set program counter to 255",
    "delete method variable v",
    "delete method variable __set__253",
    "pop a value and store in higher",
    "push the value of lower",
    "push constant PC(209)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant ()",
    "push constant 0",
    "push the value of pivot",
    "pop 3 values and push the result of applying DictAdd",
    "push the value of higher",
    "push constant PC(209)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying +",
    "pop a value and store in result",
    "delete method variable pivot",
    "delete method variable rest",
    "delete method variable lower",
    "delete method variable higher",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method sorted",
    "push the value of d",
    "push constant PC(100)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant PC(209)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 327",
    "start of method reversed",
    "push the value of d",
    "pop 1 value and push the result of applying len",
    "pop a value and store in n",
    "push constant 0",
    "pop a value and store in __size__302",
    "push constant ()",
    "push constant 1",
    "push the value of n",
    "pop 2 values and push the result of applying ..",
    "pop a value and store in __set__305",
    "push the value of __set__305",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 322 if the value is True",
    "remove smallest element from __set__305 and assign to i",
    "push the value of __size__302",
    "push the value of n",
    "push the value of i",
    "pop 2 values and push the result of applying -",
    "push the value of d",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "increment the value of __size__302",
    "set program counter to 309",
    "delete method variable i",
    "delete method variable __set__305",
    "pop a value and store in result",
    "delete method variable n",
    "restore caller method state and push result",
    "push constant ()",
    "pop a value and store it in shared variable bag",
    "set program counter to 822",
    "start of method empty",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method fromSet",
    "push constant ()",
    "push the value of s",
    "pop a value and store in __set__337",
    "push the value of __set__337",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 347 if the value is True",
    "remove smallest element from __set__337 and assign to elt",
    "push the value of elt",
    "push constant 1",
    "pop 3 values and push the result of applying DictAdd",
    "set program counter to 339",
    "delete method variable elt",
    "delete method variable __set__337",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method fromList",
    "push constant ()",
    "pop a value and store in result",
    "push the value of a",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in __set__355",
    "push the value of __set__355",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 388 if the value is True",
    "remove smallest element from __set__355 and assign to i",
    "push the value of i",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of result",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 380 if the value is False",
    "push constant ?result",
    "push the value of i",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop the address of a method variable and push the value of that variable",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 358",
    "push constant ?result",
    "push the value of i",
    "push the value of a",
    "pop a pc or dictionary f and an index i and push f(i)",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and the address of a method variable and store the value at that address",
    "set program counter to 358",
    "delete method variable i",
    "delete method variable __set__355",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method count",
    "push the value of elt",
    "push the value of bg",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 403 if the value is False",
    "push the value of elt",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "set program counter to 405",
    "push constant 0",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method bchoose",
    "increment readonly counter of context; process cannot mutate shared variables if > 0",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push constant 0",
    "push constant {}",
    "push the value of bg",
    "pop 1 value and push the result of applying keys",
    "pop a value and store in __set__412",
    "push the value of __set__412",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 424 if the value is True",
    "remove smallest element from __set__412 and assign to k",
    "push the value of k",
    "push the value of bg",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying SetAdd",
    "set program counter to 415",
    "delete method variable k",
    "delete method variable __set__412",
    "pop 2 values and push the result of applying in",
    "pop 1 value and push the result of applying not",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of bg",
    "pop 1 value and push the result of applying keys",
    "pop a set value and push one of its elements",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method add",
    "push the value of elt",
    "push the value of pb",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 453 if the value is False",
    "push the value of pb",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "set program counter to 458",
    "push the value of pb",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push constant 1",
    "pop a value and an address and store the value at the address",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method remove",
    "push the value of elt",
    "push the value of pb",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying keys",
    "pop 2 values and push the result of applying in",
    "pop a value and jump to 474 if the value is False",
    "push the value of elt",
    "push the value of pb",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "set program counter to 475",
    "push constant False",
    "pop a value and jump to 485 if the value is False",
    "push the value of pb",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "set program counter to 485",
    "push the value of elt",
    "push the value of pb",
    "pop an address and push the value at the address",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push constant 0",
    "pop 2 values and push the result of applying <=",
    "pop a value and jump to 497 if the value is False",
    "push the value of pb",
    "push the value of elt",
    "combine the top two values on the stack into an address and push the result",
    "pop an address and delete the shared variable at the address",
    "set program counter to 497",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method tas",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "push the value of lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method BinSema",
    "push the value of acquired",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method Lock",
    "push constant False",
    "push constant PC(510)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method acquired",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method acquire",
    "push the value of binsema",
    "push constant PC(499)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and jump to 529 if the value is True",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method release",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "increment readonly counter of context; process cannot mutate shared variables if > 0",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a condition and raise exception if condition is false",
    "decrement atomic counter of context",
    "decrement readonly counter of context",
    "push the value of binsema",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method held",
    "push the value of binsema",
    "pop an address and push the value at the address",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method Condition",
    "push constant ()",
    "push constant PC(330)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method wait",
    "push constant ()",
    "push constant 0",
    "push constant True",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push constant 0",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 2",
    "push constant ()",
    "pop 1 value and push the result of applying get_context",
    "pop 3 values and push the result of applying DictAdd",
    "pop a value and store in (blocked, cnt, ctx)",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of ctx",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(392)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in cnt",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of ctx",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(437)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push the value of lk",
    "push constant False",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "push the value of blocked",
    "pop a value and jump to 632 if the value is False",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of lk",
    "pop an address and push the value at the address",
    "pop 1 value and push the result of applying not",
    "pop a value and jump to 622 if the value is False",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of ctx",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(392)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "push the value of cnt",
    "pop 2 values and push the result of applying <=",
    "set program counter to 623",
    "push constant False",
    "pop a value and jump to 630 if the value is False",
    "push the value of lk",
    "push constant True",
    "pop a value and an address and store the value at the address",
    "push constant False",
    "pop a value and store in blocked",
    "set program counter to 630",
    "decrement atomic counter of context",
    "set program counter to 602",
    "delete method variable blocked",
    "delete method variable cnt",
    "delete method variable ctx",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method notify",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant ()",
    "push constant PC(330)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 660 if the value is False",
    "push constant ()",
    "push constant 0",
    "push the value of c",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of c",
    "pop an address and push the value at the address",
    "push constant PC(407)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(460)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "set program counter to 660",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method notifyAll",
    "push the value of c",
    "push constant ()",
    "push constant PC(330)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method Semaphore",
    "push the value of cnt",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method P",
    "push constant True",
    "pop a value and store in blocked",
    "push the value of blocked",
    "pop a value and jump to 698 if the value is False",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of sema",
    "pop an address and push the value at the address",
    "push constant 0",
    "pop 2 values and push the result of applying >",
    "pop a value and jump to 696 if the value is False",
    "push the value of sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying -",
    "pop a value and an address and store the value at the address",
    "push constant False",
    "pop a value and store in blocked",
    "set program counter to 696",
    "decrement atomic counter of context",
    "set program counter to 679",
    "delete method variable blocked",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method V",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of sema",
    "push a copy of the top value on the stack",
    "pop an address and push the value at the address",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method Queue",
    "push constant ()",
    "pop a value and store in result",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method get",
    "push constant True",
    "pop a value and store in blocked",
    "push the value of blocked",
    "pop a value and jump to 744 if the value is False",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant ()",
    "pop 2 values and push the result of applying !=",
    "pop a value and jump to 742 if the value is False",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant PC(42)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push the value of q",
    "push the value of q",
    "pop an address and push the value at the address",
    "push constant PC(49)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "push constant False",
    "pop a value and store in blocked",
    "set program counter to 742",
    "decrement atomic counter of context",
    "set program counter to 720",
    "delete method variable blocked",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method put",
    "increment atomic counter of context; process runs uninterrupted if larger than 0",
    "push the value of q",
    "push constant ()",
    "push constant 0",
    "push the value of q",
    "pop an address and push the value at the address",
    "pop 3 values and push the result of applying DictAdd",
    "push constant 1",
    "push the value of item",
    "pop 3 values and push the result of applying DictAdd",
    "push constant PC(32)",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and an address and store the value at the address",
    "decrement atomic counter of context",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method produce",
    "push constant ?n_empty",
    "push value of shared variable P",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ?l_in",
    "push value of shared variable P",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ?buf",
    "push value of shared variable b_in",
    "combine the top two values on the stack into an address and push the result",
    "push the value of item",
    "pop a value and an address and store the value at the address",
    "push value of shared variable b_in",
    "push constant 2",
    "pop 2 values and push the result of applying %",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store it in shared variable b_in",
    "push constant ?l_in",
    "push value of shared variable V",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ?n_full",
    "push value of shared variable V",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "set program counter to 822",
    "start of method consume",
    "push constant ?n_full",
    "push value of shared variable P",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ?l_out",
    "push value of shared variable P",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push value of shared variable b_out",
    "push value of shared variable buf",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store in result",
    "push value of shared variable b_out",
    "push constant 2",
    "pop 2 values and push the result of applying %",
    "push constant 1",
    "pop 2 values and push the result of applying +",
    "pop a value and store it in shared variable b_out",
    "push constant ?l_out",
    "push value of shared variable V",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "push constant ?n_empty",
    "push value of shared variable V",
    "pop a pc or dictionary f and an index i and push f(i)",
    "discard the top value on the stack",
    "restore caller method state and push result",
    "push constant ()",
    "push constant { 1, 2 }",
    "pop a value and store in __set__823",
    "push the value of __set__823",
    "pop 1 value and push the result of applying IsEmpty",
    "pop a value and jump to 833 if the value is True",
    "remove smallest element from __set__823 and assign to x",
    "push the value of x",
    "push constant ()",
    "pop 3 values and push the result of applying DictAdd",
    "set program counter to 825",
    "delete method variable x",
    "delete method variable __set__823",
    "pop a value and store it in shared variable buf",
    "push constant 1",
    "pop a value and store it in shared variable b_in",
    "push constant 1",
    "pop a value and store it in shared variable b_out",
    "push constant 1",
    "push value of shared variable Semaphore",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable l_in",
    "push constant 1",
    "push value of shared variable Semaphore",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable l_out",
    "push constant 0",
    "push value of shared variable Semaphore",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable n_full",
    "push constant 2",
    "push value of shared variable Semaphore",
    "pop a pc or dictionary f and an index i and push f(i)",
    "pop a value and store it in shared variable n_empty",
    "restore caller method state and push result"
  ],
  "locations": {
    "398": { "file": "modules/bag.hny", "line": "19", "code": "        result = bg[elt];" },
    "813": { "file": "code/BBsema.hny", "line": "18", "code": "    V(?l_out);" },
    "43": { "file": "modules/list.hny", "line": "10", "code": "    result = s[0];" },
    "50": { "file": "modules/list.hny", "line": "13", "code": "    result = subseq(s, 1, len(s));" },
    "403": { "file": "modules/bag.hny", "line": "21", "code": "        result = 0;" },
    "453": { "file": "modules/bag.hny", "line": "33", "code": "        (!pb)[elt] = 1;" },
    "564": { "file": "modules/synch.hny", "line": "35", "code": "    let blocked, cnt, ctx = True, 0, get_context():" },
    "208": { "file": "modules/list.hny", "line": "56", "code": "def qsort(a):" },
    "509": { "file": "modules/synch.hny", "line": "10", "code": "def BinSema(acquired):" },
    "844": { "file": "code/BBsema.hny", "line": "25", "code": "l_out = Semaphore(1);" },
    "840": { "file": "code/BBsema.hny", "line": "24", "code": "l_in = Semaphore(1);" },
    "836": { "file": "code/BBsema.hny", "line": "22", "code": "b_in = 1;" },
    "119": { "file": "modules/list.hny", "line": "35", "code": "def values(d):" },
    "41": { "file": "modules/list.hny", "line": "9", "code": "def head(s):" },
    "369": { "file": "modules/bag.hny", "line": "11", "code": "            result[a[i]] += 1;" },
    "604": { "file": "modules/synch.hny", "line": "42", "code": "            atomic:" },
    "557": { "file": "modules/synch.hny", "line": "32", "code": "    result = bag.empty();" },
    "602": { "file": "modules/synch.hny", "line": "41", "code": "        while blocked:" },
    "702": { "file": "modules/synch.hny", "line": "77", "code": "    atomic:" },
    "703": { "file": "modules/synch.hny", "line": "78", "code": "        !sema += 1;" },
    "555": { "file": "modules/synch.hny", "line": "31", "code": "def Condition(lk):" },
    "288": { "file": "modules/list.hny", "line": "69", "code": "def sorted(d):" },
    "362": { "file": "modules/bag.hny", "line": "10", "code": "        if a[i] in keys(result):" },
    "406": { "file": "modules/bag.hny", "line": "24", "code": "def bchoose(bg):" },
    "748": { "file": "modules/synch.hny", "line": "98", "code": "    atomic:" },
    "700": { "file": "modules/synch.hny", "line": "76", "code": "def V(sema):" },
    "504": { "file": "modules/synch.hny", "line": "7", "code": "        !lk = True;" },
    "681": { "file": "modules/synch.hny", "line": "67", "code": "            atomic:" },
    "711": { "file": "modules/synch.hny", "line": "81", "code": "def Queue():" },
    "67": { "file": "modules/list.hny", "line": "18", "code": "    result = 0;" },
    "822": { "file": "code/BBsema.hny", "line": "21", "code": "buf = dict{ () for x in {1..NSLOTS} };" },
    "511": { "file": "modules/synch.hny", "line": "11", "code": "    result = acquired;" },
    "476": { "file": "modules/bag.hny", "line": "38", "code": "        (!pb)[elt] -= 1;" },
    "763": { "file": "code/BBsema.hny", "line": "5", "code": "def produce(item):" },
    "7": { "file": "modules/list.hny", "line": "3", "code": "    result = [ s[x] for x in {b..e-1} ];" },
    "627": { "file": "modules/synch.hny", "line": "45", "code": "                    blocked = False;" },
    "713": { "file": "modules/synch.hny", "line": "82", "code": "    result = [];" },
    "687": { "file": "modules/synch.hny", "line": "69", "code": "                    !sema -= 1;" },
    "85": { "file": "modules/list.hny", "line": "26", "code": "    result = { v for v in a };" },
    "624": { "file": "modules/synch.hny", "line": "44", "code": "                    !lk = True;" },
    "544": { "file": "modules/synch.hny", "line": "25", "code": "        !binsema = False;" },
    "297": { "file": "modules/list.hny", "line": "74", "code": "def reversed(d):" },
    "461": { "file": "modules/bag.hny", "line": "37", "code": "    if (elt in keys(!pb)) and ((!pb)[elt] > 0):" },
    "199": { "file": "modules/list.hny", "line": "50", "code": "            index += 1;" },
    "576": { "file": "modules/synch.hny", "line": "36", "code": "        atomic:" },
    "838": { "file": "code/BBsema.hny", "line": "23", "code": "b_out = 1;" },
    "817": { "file": "code/BBsema.hny", "line": "19", "code": "    V(?n_empty);" },
    "639": { "file": "modules/synch.hny", "line": "53", "code": "        if !c != bag.empty():" },
    "562": { "file": "modules/synch.hny", "line": "34", "code": "def wait(c, lk):" },
    "353": { "file": "modules/bag.hny", "line": "8", "code": "    result = dict{};" },
    "121": { "file": "modules/list.hny", "line": "36", "code": "    result = [ d[k] for k in keys d ];" },
    "290": { "file": "modules/list.hny", "line": "70", "code": "    result = qsort(list(d));" },
    "803": { "file": "code/BBsema.hny", "line": "16", "code": "    result = buf[b_out];" },
    "682": { "file": "modules/synch.hny", "line": "68", "code": "                if !sema > 0:" },
    "549": { "file": "modules/synch.hny", "line": "28", "code": "def held(binsema):" },
    "638": { "file": "modules/synch.hny", "line": "52", "code": "    atomic:" },
    "773": { "file": "code/BBsema.hny", "line": "8", "code": "    buf[b_in] = item;" },
    "459": { "file": "modules/bag.hny", "line": "36", "code": "def remove(pb, elt):" },
    "718": { "file": "modules/synch.hny", "line": "85", "code": "    let blocked = True:" },
    "99": { "file": "modules/list.hny", "line": "30", "code": "def list(a):" },
    "769": { "file": "code/BBsema.hny", "line": "7", "code": "    P(?l_in);" },
    "355": { "file": "modules/bag.hny", "line": "9", "code": "    for i in keys(a):" },
    "5": { "file": "modules/list.hny", "line": "2", "code": "def subseq(s, b, e):" },
    "75": { "file": "modules/list.hny", "line": "20", "code": "        result += v;" },
    "65": { "file": "modules/list.hny", "line": "17", "code": "def sum(a):" },
    "184": { "file": "modules/list.hny", "line": "49", "code": "            result += [ (index, d[k]), ];" },
    "765": { "file": "code/BBsema.hny", "line": "6", "code": "    P(?n_empty);" },
    "577": { "file": "modules/synch.hny", "line": "37", "code": "            cnt = bag.count(!c, ctx);" },
    "807": { "file": "code/BBsema.hny", "line": "17", "code": "    b_out = (b_out % NSLOTS) + 1;" },
    "351": { "file": "modules/bag.hny", "line": "7", "code": "def fromList(a):" },
    "214": { "file": "modules/list.hny", "line": "58", "code": "        result = [];" },
    "69": { "file": "modules/list.hny", "line": "19", "code": "    for v in a:" },
    "431": { "file": "modules/bag.hny", "line": "27", "code": "    result = choose(keys(bg));" },
    "733": { "file": "modules/synch.hny", "line": "90", "code": "                    !q = list.tail(!q);" },
    "793": { "file": "code/BBsema.hny", "line": "13", "code": "def consume():" },
    "217": { "file": "modules/list.hny", "line": "60", "code": "        let (pivot, rest) = head(a), tail(a)" },
    "523": { "file": "modules/synch.hny", "line": "17", "code": "    result = !binsema;" },
    "716": { "file": "modules/synch.hny", "line": "84", "code": "def get(q):" },
    "329": { "file": "modules/bag.hny", "line": "1", "code": "def empty():" },
    "492": { "file": "modules/bag.hny", "line": "41", "code": "        del (!pb)[elt];" },
    "693": { "file": "modules/synch.hny", "line": "70", "code": "                    blocked = False;" },
    "521": { "file": "modules/synch.hny", "line": "16", "code": "def acquired(binsema):" },
    "173": { "file": "modules/list.hny", "line": "46", "code": "    result = [];" },
    "444": { "file": "modules/bag.hny", "line": "31", "code": "        (!pb)[elt] += 1;" },
    "271": { "file": "modules/list.hny", "line": "63", "code": "            result = qsort(lower) + [pivot,] + qsort(higher);" },
    "101": { "file": "modules/list.hny", "line": "31", "code": "    result = [ v for v in a ];" },
    "334": { "file": "modules/bag.hny", "line": "4", "code": "def fromSet(s):" },
    "48": { "file": "modules/list.hny", "line": "12", "code": "def tail(s):" },
    "728": { "file": "modules/synch.hny", "line": "89", "code": "                    result = list.head(!q);" },
    "210": { "file": "modules/list.hny", "line": "57", "code": "    if a == []:" },
    "675": { "file": "modules/synch.hny", "line": "64", "code": "def P(sema):" },
    "514": { "file": "modules/synch.hny", "line": "13", "code": "def Lock():" },
    "299": { "file": "modules/list.hny", "line": "75", "code": "    let n = len(d):" },
    "551": { "file": "modules/synch.hny", "line": "29", "code": "    result = !binsema;" },
    "788": { "file": "code/BBsema.hny", "line": "11", "code": "    V(?n_full);" },
    "778": { "file": "code/BBsema.hny", "line": "9", "code": "    b_in = (b_in % NSLOTS) + 1;" },
    "795": { "file": "code/BBsema.hny", "line": "14", "code": "    P(?n_full);" },
    "501": { "file": "modules/synch.hny", "line": "6", "code": "        result = !lk;" },
    "516": { "file": "modules/synch.hny", "line": "14", "code": "    result = BinSema(False);" },
    "500": { "file": "modules/synch.hny", "line": "5", "code": "    atomic:" },
    "380": { "file": "modules/bag.hny", "line": "13", "code": "            result[a[i]] = 1;" },
    "746": { "file": "modules/synch.hny", "line": "97", "code": "def put(q, item):" },
    "636": { "file": "modules/synch.hny", "line": "51", "code": "def notify(c):" },
    "646": { "file": "modules/synch.hny", "line": "54", "code": "            bag.remove(c, bag.bchoose(!c));" },
    "31": { "file": "modules/list.hny", "line": "6", "code": "def append(s, e):" },
    "799": { "file": "code/BBsema.hny", "line": "15", "code": "    P(?l_out);" },
    "749": { "file": "modules/synch.hny", "line": "99", "code": "        !q = list.append(!q, item);" },
    "739": { "file": "modules/synch.hny", "line": "91", "code": "                    blocked = False;" },
    "485": { "file": "modules/bag.hny", "line": "40", "code": "    if (!pb)[elt] <= 0:" },
    "393": { "file": "modules/bag.hny", "line": "18", "code": "    if elt in keys(bg):" },
    "662": { "file": "modules/synch.hny", "line": "58", "code": "def notifyAll(c):" },
    "537": { "file": "modules/synch.hny", "line": "24", "code": "        assert !binsema;" },
    "529": { "file": "modules/synch.hny", "line": "20", "code": "    await not tas(binsema);" },
    "784": { "file": "code/BBsema.hny", "line": "10", "code": "    V(?l_in);" },
    "144": { "file": "modules/list.hny", "line": "41", "code": "    result = [ (k, d[k]) for k in keys d ];" },
    "670": { "file": "modules/synch.hny", "line": "61", "code": "def Semaphore(cnt):" },
    "177": { "file": "modules/list.hny", "line": "48", "code": "        for k in keys d:" },
    "498": { "file": "modules/synch.hny", "line": "4", "code": "def tas(lk):" },
    "391": { "file": "modules/bag.hny", "line": "17", "code": "def count(bg, elt):" },
    "677": { "file": "modules/synch.hny", "line": "65", "code": "    let blocked = True:" },
    "605": { "file": "modules/synch.hny", "line": "43", "code": "                if (not !lk) and (bag.count(!c, ctx) <= cnt):" },
    "436": { "file": "modules/bag.hny", "line": "29", "code": "def add(pb, elt):" },
    "33": { "file": "modules/list.hny", "line": "7", "code": "    result = s + [e,];" },
    "331": { "file": "modules/bag.hny", "line": "2", "code": "    result = dict{};" },
    "598": { "file": "modules/synch.hny", "line": "39", "code": "            !lk = False;" },
    "534": { "file": "modules/synch.hny", "line": "22", "code": "def release(binsema):" },
    "536": { "file": "modules/synch.hny", "line": "23", "code": "    atomic:" },
    "848": { "file": "code/BBsema.hny", "line": "26", "code": "n_full = Semaphore(0);" },
    "336": { "file": "modules/bag.hny", "line": "5", "code": "    result = dict{ 1 for elt in s };" },
    "408": { "file": "modules/bag.hny", "line": "26", "code": "    assert 0 not in { bg[k] for k in keys(bg) };" },
    "722": { "file": "modules/synch.hny", "line": "87", "code": "            atomic:" },
    "171": { "file": "modules/list.hny", "line": "45", "code": "def enumerate(d):" },
    "720": { "file": "modules/synch.hny", "line": "86", "code": "        while blocked:" },
    "672": { "file": "modules/synch.hny", "line": "62", "code": "    result = cnt;" },
    "83": { "file": "modules/list.hny", "line": "25", "code": "def set(a):" },
    "723": { "file": "modules/synch.hny", "line": "88", "code": "                if !q != []:" },
    "588": { "file": "modules/synch.hny", "line": "38", "code": "            bag.add(c, ctx);" },
    "852": { "file": "code/BBsema.hny", "line": "27", "code": "n_empty = Semaphore(NSLOTS);" },
    "302": { "file": "modules/list.hny", "line": "76", "code": "        result = [ d[n-i] for i in { 1..n } ];" },
    "438": { "file": "modules/bag.hny", "line": "30", "code": "    if elt in keys(!pb):" },
    "175": { "file": "modules/list.hny", "line": "47", "code": "    let index = 0:" },
    "664": { "file": "modules/synch.hny", "line": "59", "code": "    !c = bag.empty();" },
    "679": { "file": "modules/synch.hny", "line": "66", "code": "        while blocked:" },
    "142": { "file": "modules/list.hny", "line": "40", "code": "def items(d):" },
    "527": { "file": "modules/synch.hny", "line": "19", "code": "def acquire(binsema):" }
  }
}
