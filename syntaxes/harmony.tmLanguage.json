{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Harmony",
	"scopeName": "source.harmony",
	"patterns": [{
			"include": "#statement"
		},
		{
			"include": "#expression"
		}
	],
	"repository": {
		"impossible": {
			"comment": "This is a special rule that should be used where no match is desired. It is not a good idea to match something like '1{0}' because in some cases that can result in infinite loops in token generation. So the rule instead matches and impossible expression to allow a match to fail and move to the next token.",
			"match": "$.^"
		},
		"statement": {
			"patterns": [{
					"include": "#import"
				},
				{
					"include": "#function-declaration"
				},
				{
					"include": "#generator"
				},
				{
					"include": "#statement-keyword"
				},
				{
					"include": "#assignment-operator"
				},
				{
					"include": "#semicolon"
				}
			]
		},
		"semicolon": {
			"patterns": [{
				"name": "punctuation.definition.semicolon.harmony",
				"match": "\\;$"
			}]
		},
		"comments": {
			"patterns": [{
					"name": "comment.line.number-sign.harmony",
					"contentName": "meta.typehint.comment.harmony",
					"begin": "(?x)\n  (?:\n    \\# \\s* (type:)\n    \\s*+ (?# we want `\\s*+` which is possessive quantifier since\n we do not actually want to backtrack when matching\n whitespace here)\n    (?! $ | \\#)\n  )\n",
					"end": "(?:$|(?=\\#))",
					"beginCaptures": {
						"0": {
							"name": "meta.typehint.comment.harmony"
						},
						"1": {
							"name": "comment.typehint.directive.notation.harmony"
						}
					},
					"patterns": [{
						"name": "comment.typehint.variable.notation.harmony",
						"match": "([[:alpha:]_]\\w*)"
					}]
				},
				{
					"include": "#comments-base"
				},
				{
					"include": "#comments-string-block"
				}
			]
		},
		"import": {
			"comment": "Import statements used to correctly mark `import`",
			"patterns": [{
				"begin": "\\b(?<!\\.)(import)\\b",
				"end": "\\;|$",
				"beginCaptures": {
					"1": {
						"name": "keyword.control.import.harmony"
					}
				},
				"patterns": [{
					"include": "#expression"
				}]
			}]
		},
		"statement-keyword": {
			"patterns": [{
					"name": "storage.type.function.harmony",
					"match": "\\b(def)\\b"
				},
				{
					"name": "keyword.control.flow.harmony",
					"comment": "if `as` is eventually followed by `:` or line continuation\nit's probably control flow like:\n    with foo as bar, \\\n         Foo as Bar:\n      try:\n        do_stuff()\n      except Exception as e:\n        pass\n",
					"match": "\\b(?<!\\.)as\\b(?=.*[:\\\\])"
				},
				{
					"name": "keyword.control.flow.harmony",
					"match": "(?x)\n  \\b(?<!\\.)( such\\s+that | where | atomic | del | assert | let | for | elif | else | if | pass | while )\\b\n"
				}
			]
		},
		"expression-bare": {
			"comment": "valid Harmony expressions w/o comments and line continuation",
			"patterns": [{
					"include": "#backticks"
				},
				{
					"include": "#illegal-anno"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#string"
				},
				{
					"include": "#generator"
				},
				{
					"include": "#illegal-operator"
				},
				{
					"include": "#operator"
				},
				{
					"include": "#curly-braces"
				},
				{
					"include": "#item-access"
				},
				{
					"include": "#list"
				},
				{
					"include": "#round-braces"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				},
				{
					"include": "#builtin-exceptions"
				},
				{
					"include": "#magic-names"
				},
				{
					"include": "#special-names"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#special-variables"
				},
				{
					"include": "#ellipsis"
				},
				{
					"include": "#punctuation"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"expression-base": {
			"comment": "valid Harmony expressions with comments and line continuation",
			"patterns": [{
					"include": "#comments"
				},
				{
					"include": "#expression-bare"
				},
				{
					"include": "#line-continuation"
				}
			]
		},
		"expression": {
			"comment": "All valid Harmony expressions",
			"patterns": [{
					"include": "#expression-base"
				},
				{
					"include": "#member-access"
				},
				{
					"comment": "Tokenize identifiers to help linters",
					"match": "(?x) \\b ([[:alpha:]_]\\w*) \\b"
				}
			]
		},
		"member-access": {
			"name": "meta.member.access.harmony",
			"begin": "(\\.)\\s*(?!\\.)",
			"end": "(?x)\n  # stop when you've just read non-whitespace followed by non-word\n  # i.e. when finished reading an identifier or function call\n  (?<=\\S)(?=\\W) |\n  # stop when seeing the start of something that's not a word,\n  # i.e. when seeing a non-identifier\n  (^|(?<=\\s))(?=[^\\\\\\w\\s]) |\n  $\n",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.period.harmony"
				}
			},
			"patterns": [{
					"include": "#function-call"
				},
				{
					"include": "#member-access-base"
				},
				{
					"include": "#member-access-attribute"
				}
			]
		},
		"member-access-base": {
			"patterns": [{
					"include": "#magic-names"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#special-names"
				},
				{
					"include": "#line-continuation"
				},
				{
					"include": "#item-access"
				}
			]
		},
		"member-access-attribute": {
			"comment": "Highlight attribute access in otherwise non-specialized cases.",
			"name": "meta.attribute.harmony",
			"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
		},
		"special-names": {
			"name": "constant.other.caps.harmony",
			"match": "(?x)\n  \\b\n (\n      _* [[:upper:]] [_\\d]* [[:upper:]]\n    )\n    [[:upper:]\\d]* (_\\w*)?\n  \\b\n"
		},
		"curly-braces": {
			"begin": "\\{",
			"end": "\\}",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.dict.begin.harmony"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.dict.end.harmony"
				}
			},
			"patterns": [{
					"name": "punctuation.separator.dict.harmony",
					"match": ":"
				},
				{
					"include": "#expression"
				}
			]
		},
		"list": {
			"begin": "\\[",
			"end": "\\]",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.list.begin.harmony"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.list.end.harmony"
				}
			},
			"patterns": [{
				"include": "#expression"
			}]
		},
		"round-braces": {
			"begin": "\\(",
			"end": "\\)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.begin.harmony"
				}
			},
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.end.harmony"
				}
			},
			"patterns": [{
				"include": "#expression"
			}]
		},
		"line-continuation": {
			"patterns": [{
					"match": "(\\\\)\\s*(\\S.*$\\n?)",
					"captures": {
						"1": {
							"name": "punctuation.separator.continuation.line.harmony"
						},
						"2": {
							"name": "invalid.illegal.line.continuation.harmony"
						}
					}
				},
				{
					"begin": "(\\\\)\\s*$\\n?",
					"end": "(?x)\n  (?=^\\s*$)\n  |\n  (?! (\\s* [rR]? (\\'\\'\\'|\\\"\\\"\\\"|\\'|\\\"))\n      |\n      (\\G $)  (?# '\\G' is necessary for ST)\n  )\n",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.continuation.line.harmony"
						}
					},
					"patterns": [{
						"include": "#string"
					}]
				}
			]
		},
		"assignment-operator": {
			"name": "keyword.operator.assignment.harmony",
			"match": "(?x)\n and= | or= | mod= | <<= | >>= | //= | \\*\\*=\n | \\+= | -= | /= | @=\n | \\*= | %= | ~= | \\^= | &= | \\|= | =(?!=)\n"
		},
		"operator": {
			"match": "(?x)\n    \\b(?<!\\.)\n   (?:\n   (and | or | not | in | is)   (?# 1)\n        |\n        (for | if | else | await | (?:yield(?:\\s+from)?))  (?# 2)\n  )\n    (?!\\s*:)\\b\n\n    | (<< | >> | & | \\| | \\^ | ~)   (?# 3)\n\n    | (\\*\\* | \\* | \\+ | - | % | // | / | @)  (?# 4)\n\n    | (!= | == | >= | <= | < | >)  (?# 5)\n    | ( ! | - | ~ | all | any | atLabel | bagsize | choose | min | max | nametag | not | keys | hash | len | processes ) (?# 6)",
			"captures": {
				"1": {
					"name": "keyword.operator.logical.harmony"
				},
				"2": {
					"name": "keyword.control.flow.harmony"
				},
				"3": {
					"name": "keyword.operator.bitwise.harmony"
				},
				"4": {
					"name": "keyword.operator.arithmetic.harmony"
				},
				"5": {
					"name": "keyword.operator.comparison.harmony"
				},
				"6": {
					"name": "keyword.operator.unary.harmony"
				}
			}
		},
		"punctuation": {
			"patterns": [{
					"name": "punctuation.separator.colon.harmony",
					"match": ":"
				},
				{
					"name": "punctuation.separator.element.harmony",
					"match": ","
				}
			]
		},
		"literal": {
			"patterns": [{
					"name": "constant.language.harmony",
					"match": "\\b(True|False|None|inf)\\b"
				},
				{
					"include": "#number"
				}
			]
		},
		"number": {
			"name": "constant.numeric.harmony",
			"patterns": [{
					"include": "#number-float"
				},
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-oct"
				},
				{
					"include": "#number-bin"
				},
				{
					"include": "#number-long"
				},
				{
					"name": "invalid.illegal.name.harmony",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"number-float": {
			"name": "constant.numeric.float.harmony",
			"match": "(?x)\n  (?<! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.harmony"
				}
			}
		},
		"number-dec": {
			"name": "constant.numeric.dec.harmony",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.harmony"
				},
				"2": {
					"name": "invalid.illegal.dec.harmony"
				}
			}
		},
		"number-hex": {
			"name": "constant.numeric.hex.harmony",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.harmony"
				}
			}
		},
		"number-oct": {
			"name": "constant.numeric.oct.harmony",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.harmony"
				}
			}
		},
		"number-bin": {
			"name": "constant.numeric.bin.harmony",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[bB]) (_?[01])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.harmony"
				}
			}
		},
		"number-long": {
			"name": "constant.numeric.bin.harmony",
			"comment": "this is to support Harmony2 syntax for long ints",
			"match": "(?x)\n  (?<![\\w\\.])\n    ([1-9][0-9]* | 0) ([lL])\n  \\b\n",
			"captures": {
				"2": {
					"name": "storage.type.number.harmony"
				}
			}
		},
		"string": {
			"patterns": [{
					"include": "#string-quoted-multi-line"
				},
				{
					"include": "#string-quoted-single-line"
				},
				{
					"include": "#string-bin-quoted-multi-line"
				},
				{
					"include": "#string-bin-quoted-single-line"
				},
				{
					"include": "#string-raw-quoted-multi-line"
				},
				{
					"include": "#string-raw-quoted-single-line"
				},
				{
					"include": "#string-raw-bin-quoted-multi-line"
				},
				{
					"include": "#string-raw-bin-quoted-single-line"
				}
			]
		},
		"string-unicode-guts": {
			"patterns": [{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#string-entity"
				},
				{
					"include": "#string-brace-formatting"
				}
			]
		},
		"string-consume-escape": {
			"match": "\\\\['\"\\n\\\\]"
		},
		"string-raw-guts": {
			"patterns": [{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				},
				{
					"include": "#string-brace-formatting"
				}
			]
		},
		"string-raw-bin-guts": {
			"patterns": [{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				}
			]
		},
		"string-entity": {
			"patterns": [{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				},
				{
					"include": "#string-formatting"
				}
			]
		},
		"f-expression": {
			"comment": "All valid Harmony expressions, except comments and line continuation",
			"patterns": [{
					"include": "#expression-bare"
				},
				{
					"include": "#member-access"
				},
				{
					"comment": "Tokenize identifiers to help linters",
					"match": "(?x) \\b ([[:alpha:]_]\\w*) \\b"
				}
			]
		},
		"escape-sequence-unicode": {
			"patterns": [{
				"name": "constant.character.escape.harmony",
				"match": "(?x)\n  \\\\ (\n        u[0-9A-Fa-f]{4}\n        | U[0-9A-Fa-f]{8}\n        | N\\{[\\w\\s]+?\\}\n     )\n"
			}]
		},
		"escape-sequence": {
			"name": "constant.character.escape.harmony",
			"match": "(?x)\n  \\\\ (\n        x[0-9A-Fa-f]{2}\n        | [0-7]{1,3}\n        | [\\\\\"'abfnrtv]\n     )\n"
		},
		"string-line-continuation": {
			"name": "constant.language.harmony",
			"match": "\\\\$"
		},
		"string-formatting": {
			"name": "meta.format.percent.harmony",
			"match": "(?x)\n  (\n    % (\\([\\w\\s]*\\))?\n      [-+#0 ]*\n      (\\d+|\\*)? (\\.(\\d+|\\*))?\n      ([hlL])?\n      [diouxXeEfFgGcrsab%]\n  )\n",
			"captures": {
				"1": {
					"name": "constant.character.format.placeholder.other.harmony"
				}
			}
		},
		"string-brace-formatting": {
			"patterns": [{
					"name": "meta.format.brace.harmony",
					"match": "(?x)\n  (\n    {{ | }}\n    | (?:\n      {\n        \\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'\"]+\\])*\n        (![rsa])?\n        ( : \\w? [<>=^]? [-+ ]? \\#?\n          \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )?\n      })\n  )\n",
					"captures": {
						"1": {
							"name": "constant.character.format.placeholder.other.harmony"
						},
						"3": {
							"name": "storage.type.format.harmony"
						},
						"4": {
							"name": "storage.type.format.harmony"
						}
					}
				},
				{
					"name": "meta.format.brace.harmony",
					"match": "(?x)\n  (\n    {\n      \\w* (\\.[[:alpha:]_]\\w* | \\[[^\\]'\"]+\\])*\n      (![rsa])?\n      (:)\n        [^'\"{}\\n]* (?:\n          \\{ [^'\"}\\n]*? \\} [^'\"{}\\n]*\n        )*\n    }\n  )\n",
					"captures": {
						"1": {
							"name": "constant.character.format.placeholder.other.harmony"
						},
						"3": {
							"name": "storage.type.format.harmony"
						},
						"4": {
							"name": "storage.type.format.harmony"
						}
					}
				}
			]
		},
		"generator": {
			"comment": "Match \"for ... in\" construct used in generators and for loops to\ncorrectly identify the \"in\" as a control flow keyword.\n",
			"begin": "\\bfor\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.control.flow.harmony"
				}
			},
			"end": "\\bin\\b",
			"endCaptures": {
				"0": {
					"name": "keyword.control.flow.harmony"
				}
			},
			"patterns": [{
				"include": "#expression"
			}]
		},
		"function-declaration": {
			"name": "meta.function.harmony",
			"begin": "(?x)\n  \\s*\n  (?:\\b(async) \\s+)? \\b(def)\\s+\n    (?=\n      [[:alpha:]_][[:word:]]* \\s* \\(\n    )\n",
			"end": "(:|(?=[#'\"\\n]))",
			"beginCaptures": {
				"1": {
					"name": "storage.type.function.async.harmony"
				},
				"2": {
					"name": "storage.type.function.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.section.function.begin.harmony"
				}
			},
			"patterns": [{
					"include": "#function-def-name"
				},
				{
					"include": "#parameters"
				},
				{
					"include": "#line-continuation"
				},
				{
					"include": "#return-annotation"
				}
			]
		},
		"function-def-name": {
			"patterns": [{
					"include": "#illegal-object-name"
				},
				{
					"include": "#builtin-possible-callables"
				},
				{
					"name": "entity.name.function.harmony",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"parameters": {
			"name": "meta.function.parameters.harmony",
			"begin": "(\\()",
			"end": "(\\))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.parameters.end.harmony"
				}
			},
			"patterns": [{
					"name": "keyword.operator.unpacking.parameter.harmony",
					"match": "(\\*\\*|\\*)"
				},
				{
					"include": "#illegal-names"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#parameter-special"
				},
				{
					"match": "(?x)\n  ([[:alpha:]_]\\w*)\n    \\s* (?: (,) | (?=[)#\\n=]))\n",
					"captures": {
						"1": {
							"name": "variable.parameter.function.language.harmony"
						},
						"2": {
							"name": "punctuation.separator.parameters.harmony"
						}
					}
				},
				{
					"include": "#comments"
				},
				{
					"include": "#loose-default"
				},
				{
					"include": "#annotated-parameter"
				}
			]
		},
		"parameter-special": {
			"match": "(?x)\n  \\b (const) \\b \\s*(?:(,)|(?=\\)))\n",
			"captures": {
				"1": {
					"name": "variable.parameter.function.language.harmony"
				},
				"2": {
					"name": "variable.parameter.function.language.special.const.harmony"
				},
				"3": {
					"name": "punctuation.separator.parameters.harmony"
				}
			}
		},
		"loose-default": {
			"begin": "(=)",
			"end": "(,)|(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameters.harmony"
				}
			},
			"patterns": [{
				"include": "#expression"
			}]
		},
		"annotated-parameter": {
			"begin": "(?x)\n  \\b\n  ([[:alpha:]_]\\w*) \\s* (:)\n",
			"end": "(,)|(?=\\))",
			"beginCaptures": {
				"1": {
					"name": "variable.parameter.function.language.harmony"
				},
				"2": {
					"name": "punctuation.separator.annotation.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.parameters.harmony"
				}
			},
			"patterns": [{
					"include": "#expression"
				},
				{
					"name": "keyword.operator.assignment.harmony",
					"match": "=(?!=)"
				}
			]
		},
		"return-annotation": {
			"begin": "(->)",
			"end": "(?=:)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.annotation.result.harmony"
				}
			},
			"patterns": [
			  	{
					"include": "#expression"
			  	}
			]
		},
		"item-access": {
			"patterns": [{
				"name": "meta.item-access.harmony",
				"begin": "(?x)\n  \\b(?=\n    [[:alpha:]_]\\w* \\s* \\[\n  )\n",
				"end": "(\\])",
				"endCaptures": {
					"1": {
						"name": "punctuation.definition.arguments.end.harmony"
					}
				},
				"patterns": [{
						"include": "#item-name"
					},
					{
						"include": "#item-index"
					},
					{
						"include": "#expression"
					}
				]
			}]
		},
		"item-name": {
			"patterns": [{
					"include": "#special-variables"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#special-names"
				},
				{
					"name": "meta.indexed-name.harmony",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"item-index": {
			"begin": "(\\[)",
			"end": "(?=\\])",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.harmony"
				}
			},
			"contentName": "meta.item-access.arguments.harmony",
			"patterns": [{
					"name": "punctuation.separator.slice.harmony",
					"match": ":"
				},
				{
					"include": "#expression"
				}
			]
		},
		"function-call": {
			"name": "meta.function-call.harmony",
			"comment": "Regular function call of the type \"name(args)\"",
			"begin": "(?x)\n  \\b(?=\n    ([[:alpha:]_]\\w*) \\s* (\\()\n  )\n",
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.end.harmony"
				}
			},
			"patterns": [{
					"include": "#special-variables"
				},
				{
					"include": "#function-name"
				},
				{
					"include": "#function-arguments"
				}
			]
		},
		"function-name": {
			"patterns": [{
					"include": "#builtin-possible-callables"
				},
				{
					"comment": "Some color schemas support meta.function-call.generic scope",
					"name": "meta.function-call.generic.harmony",
					"match": "(?x)\n  \\b ([[:alpha:]_]\\w*) \\b\n"
				}
			]
		},
		"function-arguments": {
			"begin": "(\\()",
			"end": "(?=\\))(?!\\)\\s*\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.arguments.begin.harmony"
				}
			},
			"contentName": "meta.function-call.arguments.harmony",
			"patterns": [{
					"name": "punctuation.separator.arguments.harmony",
					"match": "(,)"
				},
				{
					"match": "(?x)\n  (?:(?<=[,(])|^) \\s* (\\*{1,2})\n",
					"captures": {
						"1": {
							"name": "keyword.operator.unpacking.arguments.harmony"
						}
					}
				},
				{
					"include": "#illegal-names"
				},
				{
					"match": "\\b([[:alpha:]_]\\w*)\\s*(=)(?!=)",
					"captures": {
						"1": {
							"name": "variable.parameter.function-call.harmony"
						},
						"2": {
							"name": "keyword.operator.assignment.harmony"
						}
					}
				},
				{
					"name": "keyword.operator.assignment.harmony",
					"match": "=(?!=)"
				},
				{
					"include": "#expression"
				},
				{
					"match": "\\s*(\\))\\s*(\\()",
					"captures": {
						"1": {
							"name": "punctuation.definition.arguments.end.harmony"
						},
						"2": {
							"name": "punctuation.definition.arguments.begin.harmony"
						}
					}
				}
			]
		},
		"builtin-callables": {
			"patterns": [{
					"include": "#illegal-names"
				},
				{
					"include": "#illegal-object-name"
				},
				{
					"include": "#builtin-exceptions"
				},
				{
					"include": "#builtin-functions"
				},
				{
					"include": "#builtin-types"
				}
			]
		},
		"builtin-possible-callables": {
			"patterns": [{
					"include": "#builtin-callables"
				},
				{
					"include": "#magic-names"
				}
			]
		},
		"builtin-exceptions": {
			"name": "support.type.exception.harmony",
			"match": "(?x) (?<!\\.) \\b(\n  (\n    Arithmetic | Assertion | Attribute | Buffer | BlockingIO\n    | BrokenPipe | ChildProcess\n    | (Connection (Aborted | Refused | Reset)?)\n    | EOF | Environment | FileExists | FileNotFound\n    | FloatingPoint | IO | Import | Indentation | Index | Interrupted\n    | IsADirectory | NotADirectory | Permission | ProcessLookup\n    | Timeout\n    | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow\n    | Reference | Runtime | Recursion | Syntax | System\n    | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?\n    | Value | Windows | ZeroDivision | ModuleNotFound\n  ) Error\n|\n  ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import\n    | Unicode | Bytes | Resource\n  )? Warning\n|\n  SystemExit | Stop(Async)?Iteration\n  | KeyboardInterrupt\n  | GeneratorExit | (Base)?Exception\n)\\b\n"
		},
		"builtin-functions": {
			"patterns": [{
				"name": "support.function.builtin.harmony",
				"match": "(?x)\n  (?<!\\.) \\b( all | any | go | hash | inf | keys | len | max | min | nametag | setintlevel | stop | atLabel | spawn | trap | choose)\\b"
			}]
		},
		"builtin-types": {
			"name": "support.type.harmony",
			"match": "(?x)\n  (?<!\\.) \\b(\n    bool | bytearray | bytes | complex | dict\n    | float | frozenset | int | object | property\n    | slice | staticmethod | str | tuple | type )\\b\n"
		},
		"magic-function-names": {
			"comment": "these methods have magic interpretation by Harmony and are generally called\nindirectly through syntactic constructs\n",
			"match": "(?x)\n  \\b(\n    __(?:\n      abs | add | aenter | aexit | aiter | and | anext | await\n      | bool | call | ceil | cmp | coerce | complex | contains\n      | copy | deepcopy | del | delattr | delete | delitem\n      | delslice | dir | div | divmod | enter | eq | exit | float\n      | floor | floordiv | format | ge | get | getattr\n      | getattribute | getinitargs | getitem | getnewargs\n      | getslice | getstate | gt | hash | hex | iadd | iand | idiv\n      | ifloordiv | ilshift | imod | imul | index | init\n      | instancecheck | int | invert | ior | ipow | irshift | isub\n      | iter | itruediv | ixor | le | len | long | lshift | lt\n      | missing | mod | mul | ne | neg | new | next | nonzero | oct | or\n      | pos | pow | radd | rand | rdiv | rdivmod | reduce\n      | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod\n      | rmul | ror | round | rpow | rrshift | rshift | rsub\n      | rtruediv | rxor | set | setattr | setitem | setslice\n      | setstate | sizeof | str | sub | truediv\n      | trunc | unicode | xor | matmul | rmatmul | imatmul\n       | set_name | fspath | bytes | prepare\n    )__\n  )\\b\n",
			"captures": {
				"1": {
					"name": "support.function.magic.harmony"
				}
			}
		},
		"magic-variable-names": {
			"comment": "magic variables which a module may have.",
			"match": "(?x)\n  \\b(\n    __(?:\n      all | bases | builtins | code | debug\n      | defaults | dict | doc | file | func | members\n      | methods | module | mro | mro_entries | name\n      | qualname | post_init | const | signature | slots\n      | version | weakref | wrapped | annotations\n      | spec | path | package | future | traceback\n    )__\n  )\\b\n",
			"captures": {
				"1": {
					"name": "support.variable.magic.harmony"
				}
			}
		},
		"magic-names": {
			"patterns": [{
					"include": "#magic-function-names"
				},
				{
					"include": "#magic-variable-names"
				}
			]
		},
		"illegal-names": {
			"match": "(?x)\n  \\b(?:\n    (\n      and | assert | async | await | let | break | continue | def\n      | del | elif | else | except | finally | for | from | global\n      | if | in | is | nonlocal | not | or | pass | raise | return | try | while | with\n      | yield\n    )  )\\b\n",
			"captures": {
				"1": {
					"name": "keyword.control.flow.harmony"
				}
			}
		},
		"special-variables": {
			"patterns": [
				{
					"match": "\\b(const)\\b",
					"captures": {
				  		"1": {
							"name": "variable.language.special.const.harmony"
						}
					}
				},
			  	{
					"match": "\\b(result)\\b",
					"captures": {
						"1": {
							"name": "variable.language.special.result.harmony"
						}
					}
				}
			]
		},
		"ellipsis": {
			"name": "constant.other.ellipsis.harmony",
			"match": "\\.\\.\\."
		},
		"backticks": {
			"name": "invalid.deprecated.backtick.harmony",
			"begin": "\\`",
			"end": "(?:\\`|(?<!\\\\)(\\n))",
			"patterns": [{
				"include": "#expression"
			}]
		},
		"illegal-operator": {
			"patterns": [{
					"name": "invalid.illegal.operator.harmony",
					"match": "&&|\\|\\||--|\\+\\+"
				},
				{
					"name": "invalid.illegal.operator.harmony",
					"match": "[?$]"
				},
				{
					"name": "invalid.illegal.operator.harmony",
					"comment": "We don't want `!` to flash when we're typing `!=`",
					"match": "!\\b"
				}
			]
		},
		"illegal-object-name": {
			"comment": "It's illegal to name function \"True\"",
			"name": "keyword.illegal.name.harmony",
			"match": "\\b(True|False|None)\\b"
		},
		"illegal-anno": {
			"name": "invalid.illegal.annotation.harmony",
			"match": "->"
		},
		"codetags": {
			"match": "(?:\\b(NOTE|XXX|HACK|FIXME|BUG|TODO)\\b)",
			"captures": {
				"1": {
					"name": "keyword.codetag.notation.harmony"
				}
			}
		},
		"comments-base": {
			"name": "comment.line.number-sign.harmony",
			"begin": "(\\#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.harmony"
				}
			},
			"end": "($)",
			"patterns": [{
				"include": "#codetags"
			}]
		},
		"comments-string-block": {
			"name": "comment.line.block.harmony",
			"begin": "(\\(\\*)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.comment.harmony"
				}
			},
			"end": "(\\*\\))",
			"patterns": [{
				"include": "#codetags"
			}]
		},
		"string-raw-quoted-single-line": {
			"name": "string.quoted.raw.single.harmony",
			"begin": "\\b(([uU]R)|(R))((['\"]))",
			"end": "(\\4)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.harmony"
				},
				"3": {
					"name": "storage.type.string.harmony"
				},
				"4": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
					"include": "#string-single-bad-brace1-formatting-raw"
				},
				{
					"include": "#string-single-bad-brace2-formatting-raw"
				},
				{
					"include": "#string-raw-guts"
				}
			]
		},
		"string-bin-quoted-single-line": {
			"name": "string.quoted.binary.single.harmony",
			"begin": "(\\b[bB])((['\"]))",
			"end": "(\\2)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.harmony"
				},
				"2": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
				"include": "#string-entity"
			}]
		},
		"string-raw-bin-quoted-single-line": {
			"name": "string.quoted.raw.binary.single.harmony",
			"begin": "(\\b(?:R[bB]|[bB]R))((['\"]))",
			"end": "(\\2)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.harmony"
				},
				"2": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
				"include": "#string-raw-bin-guts"
			}]
		},
		"string-quoted-single-line": {
			"name": "string.quoted.single.harmony",
			"begin": "(?:\\b([rR])(?=[uU]))?([uU])?((['\"]))",
			"end": "(\\3)|((?<!\\\\)\\n)",
			"beginCaptures": {
				"1": {
					"name": "invalid.illegal.prefix.harmony"
				},
				"2": {
					"name": "storage.type.string.harmony"
				},
				"3": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
					"include": "#string-single-bad-brace1-formatting-unicode"
				},
				{
					"include": "#string-single-bad-brace2-formatting-unicode"
				},
				{
					"include": "#string-unicode-guts"
				}
			]
		},
		"string-single-bad-brace1-formatting-unicode": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!(['\"])|((?<!\\\\)\\n)) )\n        %\\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				}
			]
		},
		"string-single-bad-brace1-formatting-raw": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!(['\"])|((?<!\\\\)\\n)) )\n        %\\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [{
				"include": "#string-consume-escape"
			}]
		},
		"string-single-bad-brace2-formatting-unicode": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n  \\w*? (?!(['\"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]\n           )\n        .*?(?!(['\"])|((?<!\\\\)\\n))\n        \\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#string-entity"
				}
			]
		},
		"string-single-bad-brace2-formatting-raw": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n  \\w*? (?!(['\"])|((?<!\\\\)\\n)) [^!:\\.\\[}\\w]\n           )\n        .*?(?!(['\"])|((?<!\\\\)\\n))\n        \\}\n    )\n",
			"end": "(?=(['\"])|((?<!\\\\)\\n))",
			"patterns": [{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				}
			]
		},
		"string-raw-quoted-multi-line": {
			"name": "string.quoted.raw.multi.harmony",
			"begin": "\\b(([uU]R)|(R))('''|\"\"\")",
			"end": "(\\4)",
			"beginCaptures": {
				"2": {
					"name": "invalid.deprecated.prefix.harmony"
				},
				"3": {
					"name": "storage.type.string.harmony"
				},
				"4": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
					"include": "#string-multi-bad-brace1-formatting-raw"
				},
				{
					"include": "#string-multi-bad-brace2-formatting-raw"
				},
				{
					"include": "#string-raw-guts"
				}
			]
		},
		"string-bin-quoted-multi-line": {
			"name": "string.quoted.binary.multi.harmony",
			"begin": "(\\b[bB])('''|\"\"\")",
			"end": "(\\2)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.harmony"
				},
				"2": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
				"include": "#string-entity"
			}]
		},
		"string-raw-bin-quoted-multi-line": {
			"name": "string.quoted.raw.binary.multi.harmony",
			"begin": "(\\b(?:R[bB]|[bB]R))('''|\"\"\")",
			"end": "(\\2)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.string.harmony"
				},
				"2": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
				"include": "#string-raw-bin-guts"
			}]
		},
		"string-quoted-multi-line": {
			"name": "string.quoted.multi.harmony",
			"begin": "(?:\\b([rR])(?=[uU]))?([uU])?('''|\"\"\")",
			"end": "(\\3)",
			"beginCaptures": {
				"1": {
					"name": "invalid.illegal.prefix.harmony"
				},
				"2": {
					"name": "storage.type.string.harmony"
				},
				"3": {
					"name": "punctuation.definition.string.begin.harmony"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.harmony"
				},
				"2": {
					"name": "invalid.illegal.newline.harmony"
				}
			},
			"patterns": [{
					"include": "#string-multi-bad-brace1-formatting-unicode"
				},
				{
					"include": "#string-multi-bad-brace2-formatting-unicode"
				},
				{
					"include": "#string-unicode-guts"
				}
			]
		},
		"string-multi-bad-brace1-formatting-unicode": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!'''|\"\"\") )\n        %\\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#string-line-continuation"
				}
			]
		},
		"string-multi-bad-brace1-formatting-raw": {
			"comment": "template using {% ... %}",
			"begin": "(?x)\n    (?= \\{%\n          ( .*? (?!'''|\"\"\") )\n        %\\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [{
				"include": "#string-consume-escape"
			}]
		},
		"string-multi-bad-brace2-formatting-unicode": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n  \\w*? (?!'''|\"\"\") [^!:\\.\\[}\\w]\n           )\n        .*?(?!'''|\"\"\")\n        \\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#string-entity"
				}
			]
		},
		"string-multi-bad-brace2-formatting-raw": {
			"comment": "odd format or format-like syntax",
			"begin": "(?x)\n    (?!\\{\\{)\n    (?= \\{ (\n \\w*? (?!'''|\"\"\") [^!:\\.\\[}\\w]\n           )\n        .*?(?!'''|\"\"\")\n        \\}\n    )\n",
			"end": "(?='''|\"\"\")",
			"patterns": [{
					"include": "#string-consume-escape"
				},
				{
					"include": "#string-formatting"
				}
			]
		}
	}
}