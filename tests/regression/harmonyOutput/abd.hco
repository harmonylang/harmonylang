{
  "nstates": 2,
  "issue": "No issues",
  "hvm": {
    "modules": {
        "bag": {
            "file": "/private/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpsmcohnyl/env/lib/python3.12/site-packages/harmony_model_checker/modules/bag.hny",
            "lines": [
                "def empty() returns bg:",
                "    bg = {:}",
                "",
                "def fromSet(s) returns bg:",
                "    bg = { elt:1 for elt in s }",
                "",
                "def fromList(a) returns bg:",
                "    bg = {:}",
                "    for v in a:",
                "        if v in bg:",
                "            bg[v] += 1",
                "        else:",
                "            bg[v] = 1",
                "",
                "builtin multiplicity \"bag$multiplicity\"",
                "def multiplicity(bg, elt) returns count:",
                "    if elt in bg:",
                "        count = bg[elt]",
                "    else:",
                "        count = 0",
                "",
                "builtin size \"bag$size\"",
                "def size(bg) returns count:",
                "    count = 0",
                "    for _:c in bg:",
                "        count += c",
                "",
                "builtin bmin \"bag$bmin\"",
                "def bmin(bg) returns count:",
                "    assert bg != {:}",
                "    count = min(keys(bg))",
                "",
                "builtin bmax \"bag$bmax\"",
                "def bmax(bg) returns count:",
                "    assert bg != {:}",
                "    count = max(keys(bg))",
                "",
                "def bchoose(bg) returns elt:",
                "    elt = choose(keys(bg))",
                "",
                "builtin add \"bag$add\"",
                "def add(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        result[elt] += 1",
                "    else:",
                "        result[elt] = 1",
                "",
                "builtin remove \"bag$remove\"",
                "def remove(bg, elt) returns result:",
                "    result = bg",
                "    if elt in result:",
                "        assert result[elt] > 0",
                "        result[elt] -= 1",
                "        if result[elt] == 0:",
                "            del result[elt]",
                "",
                "# Return set of all subbags of bg of size k",
                "def combinations(bg, k) returns result:",
                "    if k == 0:",
                "        result = { {:} }",
                "    else:",
                "        let n = size(bg):",
                "            if k > n:",
                "                result = {}",
                "            elif k == n:",
                "                result = { bg }",
                "            else:",
                "                let hd = bmin(bg) let tl = remove(bg, hd):",
                "                    result = { add(x, hd) for x in combinations(tl, k - 1) }",
                "                                | combinations(tl, k)"
              ],
            "identifiers": {
                "tl": "local-const",
                "fromSet": "constant",
                "x": "local-const",
                "empty": "constant",
                "multiplicity": "constant",
                "size": "constant",
                "n": "local-const",
                "k": "local-const",
                "hd": "local-const",
                "a": "local-const",
                "bmax": "constant",
                "add": "constant",
                "c": "local-const",
                "combinations": "constant",
                "elt": "local-const",
                "this": "local-var",
                "remove": "constant",
                "v": "local-const",
                "s": "local-const",
                "___": "___",
                "fromList": "constant",
                "bchoose": "constant",
                "bmin": "constant",
                "bg": "local-const"
              }
          },
        "__main__": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpw5t3tczz/abd.hny",
            "lines": [
                "import bag",
                "",
                "const F = 1",
                "const N = (2 * F) + 1",
                "",
                "network = bag.empty()",
                "",
                "def send(m): atomically network = bag.add(network, m)",
                "",
                "def server():",
                "    var t, v, received = (0, None), None, {}",
                "    while True:",
                "        atomically when exists m in { k for k in keys network - received",
                "                            where k.type in {\"read\", \"write\"} }:",
                "            received |= { m }",
                "            if (m.type == \"write\") and (m.value[0] > t):",
                "                t, v = m.value",
                "            send({ .type: .response, .dst: m.src, .value: (t, v) })",
                "",
                "def init():",
                "    for i in { 1 .. N }: spawn eternal server()",
                "",
                "def receive(uid, phase) returns quorums:",
                "    let msgs = { m:c for m:c in network",
                "                where (m.type == .response) and (m.dst == (uid, phase)) }:",
                "        quorums = bag.combinations(msgs, N - F)",
                "",
                "def read(uid) returns contents:",
                "    send({ .type: \"read\", .src: (uid, 1) })",
                "    atomically when exists msgs in receive(uid, 1):",
                "        let (t, v) = max(m.value for m in keys msgs):",
                "            send({ .type: \"write\", .src: (uid, 2), .value: (t, v) })",
                "            contents = v",
                "    atomically when exists msgs in receive(uid, 2):",
                "        pass",
                "",
                "def write(uid, v):",
                "    send({ .type: \"read\", .src: (uid, 1) })",
                "    atomically when exists msgs in receive(uid, 1):",
                "        let (t, _) = max(m.value for m in keys msgs)",
                "        let nt = (t[0] + 1, uid):",
                "            send({ .type: \"write\", .src: (uid, 2), .value: (nt, v) })",
                "    atomically when exists msgs in receive(uid, 2):",
                "        pass"
              ],
            "identifiers": {
                "nt": "local-const",
                "received": "local-var",
                "bag": "module",
                "receive": "constant",
                "send": "constant",
                "server": "constant",
                "i": "local-const",
                "k": "local-const",
                "write": "constant",
                "read": "constant",
                "m": "local-const",
                "c": "local-const",
                "t": "local-const",
                "uid": "local-const",
                "this": "local-var",
                "v": "local-const",
                "msgs": "local-const",
                "___": "___",
                "phase": "local-const",
                "N": "constant",
                "network": "global",
                "F": "constant",
                "init": "constant"
              }
          }
      },
    "labels": {
        "__end__": 780
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 63",
            "jump over method definition: set program counter to 63"
          ],
        [
            "Frame empty()",
            "start of method empty"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 63",
            "jump over method definition: set program counter to 63"
          ],
        [
            "Frame fromSet(s)",
            "start of method fromSet"
          ],
        [
            "Push {:}",
            "initialize accumulator for dict comprehension: push constant {:}"
          ],
        [
            "StoreVar $accu8",
            "initialize accumulator for dict comprehension: pop a value and store in $accu8"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(elt)",
            "get next element and assign to elt; push False or True depending on success"
          ],
        [
            "JumpCond False 24",
            "check if loop is done: pop a value and jump to 24 if the value is False"
          ],
        [
            "LoadVar $accu8",
            "load accumulator: push the value of $accu8"
          ],
        [
            "DelVar $accu8",
            "delete method variable $accu8"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar $accu8",
            "update accumulator: pop a value and store in $accu8"
          ],
        [
            "Jump 14",
            "set program counter to 14"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "LoadVar $accu8",
            "load final accumulator result: push the value of $accu8"
          ],
        [
            "DelVar $accu8",
            "delete method variable $accu8"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Jump 63",
            "jump over method definition: set program counter to 63"
          ],
        [
            "Frame fromList(a)",
            "start of method fromList"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "StoreVar bg",
            "pop a value and store in bg"
          ],
        [
            "LoadVar a",
            "push the value of a"
          ],
        [
            "DelVar a",
            "delete method variable a"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(v)",
            "get next element and assign to v; push False or True depending on success"
          ],
        [
            "JumpCond False 60",
            "check if loop is done: pop a value and jump to 60 if the value is False"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 53",
            "pop a value and jump to 53 if the value is False"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 37",
            "set program counter to 37"
          ],
        [
            "Push ?bg",
            "push constant ?bg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [bg]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 37",
            "set program counter to 37"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(bg)",
            "restore caller method state and push bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push PC(66)",
            "push constant PC(66)"
          ],
        [
            "Builtin(bag$multiplicity)",
            "top of stack is a built-in operation called bag$multiplicity"
          ],
        [
            "Jump 85",
            "jump over method definition: set program counter to 85"
          ],
        [
            "Frame multiplicity(bg, elt)",
            "start of method multiplicity"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 79",
            "pop a value and jump to 79 if the value is False"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 83",
            "set program counter to 83"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(88)",
            "push constant PC(88)"
          ],
        [
            "Builtin(bag$size)",
            "top of stack is a built-in operation called bag$size"
          ],
        [
            "Jump 107",
            "jump over method definition: set program counter to 107"
          ],
        [
            "Frame size(bg)",
            "start of method size"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(_, c)",
            "get next element and assign to _:c; push False or True depending on success"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "JumpCond False 104",
            "check if loop is done: pop a value and jump to 104 if the value is False"
          ],
        [
            "LoadVar count",
            "push the value of count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "Jump 94",
            "set program counter to 94"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(110)",
            "push constant PC(110)"
          ],
        [
            "Builtin(bag$bmin)",
            "top of stack is a built-in operation called bag$bmin"
          ],
        [
            "Jump 126",
            "jump over method definition: set program counter to 126"
          ],
        [
            "Frame bmin(bg)",
            "start of method bmin"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary min",
            "pop 1 value and push the result of applying min"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Push PC(129)",
            "push constant PC(129)"
          ],
        [
            "Builtin(bag$bmax)",
            "top of stack is a built-in operation called bag$bmax"
          ],
        [
            "Jump 154",
            "jump over method definition: set program counter to 154"
          ],
        [
            "Frame bmax(bg)",
            "start of method bmax"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "1-ary max",
            "pop 1 value and push the result of applying max"
          ],
        [
            "StoreVar count",
            "pop a value and store in count"
          ],
        [
            "ReturnOp(count)",
            "restore caller method state and push count"
          ],
        [
            "DelVar count",
            "delete method variable count"
          ],
        [
            "Jump 154",
            "jump over method definition: set program counter to 154"
          ],
        [
            "Frame bchoose(bg)",
            "start of method bchoose"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar elt",
            "pop a value and store in elt"
          ],
        [
            "ReturnOp(elt)",
            "restore caller method state and push elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "Push PC(157)",
            "push constant PC(157)"
          ],
        [
            "Builtin(bag$add)",
            "top of stack is a built-in operation called bag$add"
          ],
        [
            "Jump 183",
            "jump over method definition: set program counter to 183"
          ],
        [
            "Frame add(bg, elt)",
            "start of method add"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 176",
            "pop a value and jump to 176 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Jump 182",
            "set program counter to 182"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(186)",
            "push constant PC(186)"
          ],
        [
            "Builtin(bag$remove)",
            "top of stack is a built-in operation called bag$remove"
          ],
        [
            "Jump 318",
            "jump over method definition: set program counter to 318"
          ],
        [
            "Frame remove(bg, elt)",
            "start of method remove"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 226",
            "pop a value and jump to 226 if the value is False"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar [result]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 226",
            "pop a value and jump to 226 if the value is False"
          ],
        [
            "Push ?result",
            "push constant ?result"
          ],
        [
            "LoadVar elt",
            "push the value of elt"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "DelVar [result]",
            "pop an address of a method variable and delete that variable"
          ],
        [
            "DelVar elt",
            "delete method variable elt"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Jump 318",
            "jump over method definition: set program counter to 318"
          ],
        [
            "Frame combinations(bg, k)",
            "start of method combinations"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 242",
            "pop a value and jump to 242 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 317",
            "set program counter to 317"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(88)",
            "call method PC(88)"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "JumpCond False 255",
            "pop a value and jump to 255 if the value is False"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 317",
            "set program counter to 317"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 267",
            "pop a value and jump to 267 if the value is False"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 317",
            "set program counter to 317"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "Apply PC(110)",
            "call method PC(110)"
          ],
        [
            "StoreVar hd",
            "pop a value and store in hd"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar bg",
            "push the value of bg"
          ],
        [
            "DelVar bg",
            "delete method variable bg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(186)",
            "call method PC(186)"
          ],
        [
            "StoreVar tl",
            "pop a value and store in tl"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu231",
            "initialize accumulator for set comprehension: pop a value and store in $accu231"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(229)",
            "call method PC(229)"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 303",
            "check if loop is done: pop a value and jump to 303 if the value is False"
          ],
        [
            "LoadVar $accu231",
            "load accumulator: push the value of $accu231"
          ],
        [
            "DelVar $accu231",
            "delete method variable $accu231"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar hd",
            "push the value of hd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(157)",
            "call method PC(157)"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu231",
            "update accumulator: pop a value and store in $accu231"
          ],
        [
            "Jump 289",
            "set program counter to 289"
          ],
        [
            "DelVar hd",
            "delete method variable hd"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu231",
            "load final accumulator result: push the value of $accu231"
          ],
        [
            "DelVar $accu231",
            "delete method variable $accu231"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar tl",
            "push the value of tl"
          ],
        [
            "DelVar tl",
            "delete method variable tl"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(229)",
            "call method PC(229)"
          ],
        [
            "2-ary |",
            "pop 2 values and push the result of applying |"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push PC(2)",
            "push constant PC(2)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store network",
            "pop a value and store it in shared variable network"
          ],
        [
            "Jump 778",
            "jump over method definition: set program counter to 778"
          ],
        [
            "Frame send(m)",
            "start of method send"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Push PC(157)",
            "push constant PC(157)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Load network",
            "push value of shared variable network"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store network",
            "pop a value and store it in shared variable network"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 778",
            "jump over method definition: set program counter to 778"
          ],
        [
            "Frame server()",
            "start of method server"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push None",
            "push constant None"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar (t, v, received)",
            "pop a value and store in (t, v, received)"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "JumpCond False 460",
            "pop a value and jump to 460 if the value is False"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu301",
            "initialize accumulator for set comprehension: pop a value and store in $accu301"
          ],
        [
            "Load network",
            "push value of shared variable network"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "LoadVar received",
            "push the value of received"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "Cut(k)",
            "get next element and assign to k; push False or True depending on success"
          ],
        [
            "JumpCond False 384",
            "check if loop is done: pop a value and jump to 384 if the value is False"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push \"read\"",
            "push constant \"read\""
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push \"write\"",
            "push constant \"write\""
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "JumpCond False 363",
            "pop a value and jump to 363 if the value is False"
          ],
        [
            "LoadVar $accu301",
            "load accumulator: push the value of $accu301"
          ],
        [
            "DelVar $accu301",
            "delete method variable $accu301"
          ],
        [
            "LoadVar k",
            "push the value of k"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu301",
            "update accumulator: pop a value and store in $accu301"
          ],
        [
            "Jump 363",
            "set program counter to 363"
          ],
        [
            "DelVar k",
            "delete method variable k"
          ],
        [
            "LoadVar $accu301",
            "load final accumulator result: push the value of $accu301"
          ],
        [
            "DelVar $accu301",
            "delete method variable $accu301"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 395",
            "pop a value and jump to 395 if the value is False"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 354",
            "set program counter to 354"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar m",
            "pop a value and store in m"
          ],
        [
            "Jump 401",
            "set program counter to 401"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 354",
            "set program counter to 354"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "LoadVar received",
            "push the value of received"
          ],
        [
            "DelVar received",
            "delete method variable received"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary |",
            "pop 2 values and push the result of applying |"
          ],
        [
            "StoreVar received",
            "pop a value and store in received"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push \"write\"",
            "push constant \"write\""
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 425",
            "pop a value and jump to 425 if the value is False"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "LoadVar t",
            "push the value of t"
          ],
        [
            "2-ary >",
            "pop 2 values and push the result of applying >"
          ],
        [
            "Jump 426",
            "set program counter to 426"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 438",
            "pop a value and jump to 438 if the value is False"
          ],
        [
            "Push ?t",
            "push constant ?t"
          ],
        [
            "Push ?v",
            "push constant ?v"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Split 2",
            "splits a tuple value into its elements"
          ],
        [
            "Move 3",
            "move stack element to top"
          ],
        [
            "Move 2",
            "move stack element to top"
          ],
        [
            "StoreVar [v]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "StoreVar [t]",
            "pop a value and the address of a method variable and store the value at that address"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "Push \"response\"",
            "push constant \"response\""
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"dst\"",
            "push constant \"dst\""
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "Push \"src\"",
            "push constant \"src\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar t",
            "push the value of t"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Apply PC(324)",
            "call method PC(324)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 352",
            "set program counter to 352"
          ],
        [
            "DelVar received",
            "delete method variable received"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 778",
            "jump over method definition: set program counter to 778"
          ],
        [
            "Frame init()",
            "start of method init"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "JumpCond False 479",
            "check if loop is done: pop a value and jump to 479 if the value is False"
          ],
        [
            "Push ?PC(339)",
            "push constant ?PC(339)"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 470",
            "set program counter to 470"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 778",
            "jump over method definition: set program counter to 778"
          ],
        [
            "Frame receive(uid, phase)",
            "start of method receive"
          ],
        [
            "Push {:}",
            "initialize accumulator for dict comprehension: push constant {:}"
          ],
        [
            "StoreVar $accu416",
            "initialize accumulator for dict comprehension: pop a value and store in $accu416"
          ],
        [
            "Load network",
            "push value of shared variable network"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "Cut(m, c)",
            "get next element and assign to m:c; push False or True depending on success"
          ],
        [
            "JumpCond False 519",
            "check if loop is done: pop a value and jump to 519 if the value is False"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push \"response\"",
            "push constant \"response\""
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 508",
            "pop a value and jump to 508 if the value is False"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "Push \"dst\"",
            "push constant \"dst\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar phase",
            "push the value of phase"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Jump 509",
            "set program counter to 509"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "JumpCond False 486",
            "pop a value and jump to 486 if the value is False"
          ],
        [
            "LoadVar $accu416",
            "load accumulator: push the value of $accu416"
          ],
        [
            "DelVar $accu416",
            "delete method variable $accu416"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "LoadVar c",
            "push the value of c"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "StoreVar $accu416",
            "update accumulator: pop a value and store in $accu416"
          ],
        [
            "Jump 486",
            "set program counter to 486"
          ],
        [
            "DelVar c",
            "delete method variable c"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "DelVar phase",
            "delete method variable phase"
          ],
        [
            "DelVar uid",
            "delete method variable uid"
          ],
        [
            "LoadVar $accu416",
            "load final accumulator result: push the value of $accu416"
          ],
        [
            "DelVar $accu416",
            "delete method variable $accu416"
          ],
        [
            "StoreVar msgs",
            "pop a value and store in msgs"
          ],
        [
            "Push PC(229)",
            "push constant PC(229)"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar msgs",
            "push the value of msgs"
          ],
        [
            "DelVar msgs",
            "delete method variable msgs"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar quorums",
            "pop a value and store in quorums"
          ],
        [
            "ReturnOp(quorums)",
            "restore caller method state and push quorums"
          ],
        [
            "DelVar quorums",
            "delete method variable quorums"
          ],
        [
            "Jump 778",
            "jump over method definition: set program counter to 778"
          ],
        [
            "Frame read(uid)",
            "start of method read"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "Push \"read\"",
            "push constant \"read\""
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"src\"",
            "push constant \"src\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Apply PC(324)",
            "call method PC(324)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(481)",
            "call method PC(481)"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 571",
            "pop a value and jump to 571 if the value is False"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 555",
            "set program counter to 555"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar msgs",
            "pop a value and store in msgs"
          ],
        [
            "Jump 577",
            "set program counter to 577"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 555",
            "set program counter to 555"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu500",
            "initialize accumulator for list comprehension: pop a value and store in $accu500"
          ],
        [
            "LoadVar msgs",
            "push the value of msgs"
          ],
        [
            "DelVar msgs",
            "delete method variable msgs"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(m)",
            "get next element and assign to m; push False or True depending on success"
          ],
        [
            "JumpCond False 596",
            "check if loop is done: pop a value and jump to 596 if the value is False"
          ],
        [
            "LoadVar $accu500",
            "load accumulator: push the value of $accu500"
          ],
        [
            "DelVar $accu500",
            "delete method variable $accu500"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu500",
            "update accumulator: pop a value and store in $accu500"
          ],
        [
            "Jump 584",
            "set program counter to 584"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "LoadVar $accu500",
            "load final accumulator result: push the value of $accu500"
          ],
        [
            "DelVar $accu500",
            "delete method variable $accu500"
          ],
        [
            "1-ary max",
            "pop 1 value and push the result of applying max"
          ],
        [
            "StoreVar (t, v)",
            "pop a value and store in (t, v)"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "Push \"write\"",
            "push constant \"write\""
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"src\"",
            "push constant \"src\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar t",
            "push the value of t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Apply PC(324)",
            "call method PC(324)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "StoreVar contents",
            "pop a value and store in contents"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(481)",
            "call method PC(481)"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 642",
            "pop a value and jump to 642 if the value is False"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 626",
            "set program counter to 626"
          ],
        [
            "DelVar uid",
            "delete method variable uid"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar msgs",
            "pop a value and store in msgs"
          ],
        [
            "DelVar msgs",
            "delete method variable msgs"
          ],
        [
            "Jump 650",
            "set program counter to 650"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 626",
            "set program counter to 626"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(contents)",
            "restore caller method state and push contents"
          ],
        [
            "DelVar contents",
            "delete method variable contents"
          ],
        [
            "Jump 778",
            "jump over method definition: set program counter to 778"
          ],
        [
            "Frame write(uid, v)",
            "start of method write"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "Push \"read\"",
            "push constant \"read\""
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"src\"",
            "push constant \"src\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Apply PC(324)",
            "call method PC(324)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(481)",
            "call method PC(481)"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 685",
            "pop a value and jump to 685 if the value is False"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 669",
            "set program counter to 669"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar msgs",
            "pop a value and store in msgs"
          ],
        [
            "Jump 691",
            "set program counter to 691"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 669",
            "set program counter to 669"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu604",
            "initialize accumulator for list comprehension: pop a value and store in $accu604"
          ],
        [
            "LoadVar msgs",
            "push the value of msgs"
          ],
        [
            "DelVar msgs",
            "delete method variable msgs"
          ],
        [
            "1-ary keys",
            "pop 1 value and push the result of applying keys"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(m)",
            "get next element and assign to m; push False or True depending on success"
          ],
        [
            "JumpCond False 710",
            "check if loop is done: pop a value and jump to 710 if the value is False"
          ],
        [
            "LoadVar $accu604",
            "load accumulator: push the value of $accu604"
          ],
        [
            "DelVar $accu604",
            "delete method variable $accu604"
          ],
        [
            "LoadVar m",
            "push the value of m"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu604",
            "update accumulator: pop a value and store in $accu604"
          ],
        [
            "Jump 698",
            "set program counter to 698"
          ],
        [
            "DelVar m",
            "delete method variable m"
          ],
        [
            "LoadVar $accu604",
            "load final accumulator result: push the value of $accu604"
          ],
        [
            "DelVar $accu604",
            "delete method variable $accu604"
          ],
        [
            "1-ary max",
            "pop 1 value and push the result of applying max"
          ],
        [
            "StoreVar (t, _)",
            "pop a value and store in (t, _)"
          ],
        [
            "DelVar _",
            "delete method variable _"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar t",
            "push the value of t"
          ],
        [
            "DelVar t",
            "delete method variable t"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary Closure",
            "pop 2 values and push the result of applying Closure"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar nt",
            "pop a value and store in nt"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Push \"type\"",
            "push constant \"type\""
          ],
        [
            "Push \"write\"",
            "push constant \"write\""
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"src\"",
            "push constant \"src\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Push \"value\"",
            "push constant \"value\""
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar nt",
            "push the value of nt"
          ],
        [
            "DelVar nt",
            "delete method variable nt"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "3-ary DictAdd",
            "pop 3 values and push the result of applying DictAdd"
          ],
        [
            "Apply PC(324)",
            "call method PC(324)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar uid",
            "push the value of uid"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(481)",
            "call method PC(481)"
          ],
        [
            "Dup",
            "push a copy of the top value on the stack"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond False 767",
            "pop a value and jump to 767 if the value is False"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 751",
            "set program counter to 751"
          ],
        [
            "DelVar uid",
            "delete method variable uid"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar msgs",
            "pop a value and store in msgs"
          ],
        [
            "DelVar msgs",
            "delete method variable msgs"
          ],
        [
            "Jump 775",
            "set program counter to 775"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Jump 751",
            "set program counter to 751"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                1,
                1,
                45,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                12
              ],
            "line": 2,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                23
              ],
            "line": 1,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 14,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 29,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                31
              ],
            "line": 5,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                26
              ],
            "line": 4,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 10
          },
        {
            "module": "bag",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 8,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 12,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 18,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 11,
            "stmt": [
                11,
                13,
                11,
                22
              ],
            "line": 11,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                19
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 13,
            "stmt": [
                13,
                13,
                13,
                21
              ],
            "line": 13,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 9,
            "stmt": [
                9,
                5,
                9,
                14
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                27
              ],
            "line": 7,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                39
              ],
            "line": 15,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 16,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 18,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 23,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 18,
            "stmt": [
                18,
                9,
                18,
                23
              ],
            "line": 18,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 17,
            "stmt": [
                17,
                5,
                17,
                17
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 20,
            "stmt": [
                20,
                9,
                20,
                17
              ],
            "line": 20,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 16,
            "stmt": [
                16,
                1,
                16,
                40
              ],
            "line": 16,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 22,
            "stmt": [
                22,
                1,
                22,
                23
              ],
            "line": 22,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 24,
            "stmt": [
                24,
                5,
                24,
                13
              ],
            "line": 24,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 18,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                18
              ],
            "line": 26,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 25,
            "stmt": [
                25,
                5,
                25,
                17
              ],
            "line": 25,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                27
              ],
            "line": 23,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                23
              ],
            "line": 28,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 30,
            "stmt": [
                30,
                5,
                30,
                20
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 31,
            "stmt": [
                31,
                5,
                31,
                25
              ],
            "line": 31,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 29,
            "stmt": [
                29,
                1,
                29,
                27
              ],
            "line": 29,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                23
              ],
            "line": 33,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 35,
            "stmt": [
                35,
                5,
                35,
                20
              ],
            "line": 35,
            "endcolumn": 20,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 25,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 36,
            "stmt": [
                36,
                5,
                36,
                25
              ],
            "line": 36,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 34,
            "stmt": [
                34,
                1,
                34,
                27
              ],
            "line": 34,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 24,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 25,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 26,
            "column": 11
          },
        {
            "module": "bag",
            "endline": 39,
            "stmt": [
                39,
                5,
                39,
                26
              ],
            "line": 39,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 38,
            "stmt": [
                38,
                1,
                38,
                28
              ],
            "line": 38,
            "endcolumn": 28,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 11,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 41,
            "stmt": [
                41,
                1,
                41,
                21
              ],
            "line": 41,
            "endcolumn": 21,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 43,
            "stmt": [
                43,
                5,
                43,
                15
              ],
            "line": 43,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 45,
            "stmt": [
                45,
                9,
                45,
                24
              ],
            "line": 45,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 44,
            "stmt": [
                44,
                5,
                44,
                21
              ],
            "line": 44,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 47,
            "stmt": [
                47,
                9,
                47,
                23
              ],
            "line": 47,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 42,
            "stmt": [
                42,
                1,
                42,
                32
              ],
            "line": 42,
            "endcolumn": 32,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 49,
            "stmt": [
                49,
                1,
                49,
                27
              ],
            "line": 49,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "bag",
            "endline": 51,
            "stmt": [
                51,
                5,
                51,
                15
              ],
            "line": 51,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 10,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 15
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 20,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 52,
            "stmt": [
                52,
                5,
                52,
                21
              ],
            "line": 52,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 25,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 26,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 53,
            "stmt": [
                53,
                9,
                53,
                30
              ],
            "line": 53,
            "endcolumn": 30,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 18,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 24,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 54,
            "stmt": [
                54,
                9,
                54,
                24
              ],
            "line": 54,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 17,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 21,
            "column": 19
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 22,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 27,
            "column": 12
          },
        {
            "module": "bag",
            "endline": 55,
            "stmt": [
                55,
                9,
                55,
                28
              ],
            "line": 55,
            "endcolumn": 10,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 26,
            "column": 24
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 56,
            "stmt": [
                56,
                13,
                56,
                27
              ],
            "line": 56,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 50,
            "stmt": [
                50,
                1,
                50,
                35
              ],
            "line": 50,
            "endcolumn": 35,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 6,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 22,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 61,
            "stmt": [
                61,
                9,
                61,
                24
              ],
            "line": 61,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 60,
            "stmt": [
                60,
                5,
                60,
                14
              ],
            "line": 60,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 23,
            "column": 22
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 63,
            "stmt": [
                63,
                9,
                63,
                24
              ],
            "line": 63,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 20,
            "column": 16
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 27,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 65,
            "stmt": [
                65,
                17,
                65,
                27
              ],
            "line": 65,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 64,
            "stmt": [
                64,
                13,
                64,
                21
              ],
            "line": 64,
            "endcolumn": 21,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 23,
            "column": 18
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "bag",
            "endline": 67,
            "stmt": [
                67,
                17,
                67,
                31
              ],
            "line": 67,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 66,
            "stmt": [
                66,
                13,
                66,
                24
              ],
            "line": 66,
            "endcolumn": 24,
            "column": 13
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 32,
            "column": 31
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 33,
            "column": 26
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                17,
                69,
                33
              ],
            "line": 69,
            "endcolumn": 24,
            "column": 17
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 52,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 55
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 57,
            "column": 44
          },
        {
            "module": "bag",
            "endline": 69,
            "stmt": [
                69,
                35,
                69,
                57
              ],
            "line": 69,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 66,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 69,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 73
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 69
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 73,
            "column": 65
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 34,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 39
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 41,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 74
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 74,
            "column": 32
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 49,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 52,
            "column": 48
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 71,
            "endcolumn": 53,
            "column": 35
          },
        {
            "module": "bag",
            "endline": 71,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 53,
            "column": 30
          },
        {
            "module": "bag",
            "endline": 70,
            "stmt": [
                70,
                21,
                71,
                53
              ],
            "line": 70,
            "endcolumn": 28,
            "column": 21
          },
        {
            "module": "bag",
            "endline": 59,
            "stmt": [
                59,
                1,
                59,
                39
              ],
            "line": 59,
            "endcolumn": 39,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 21,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                21
              ],
            "line": 6,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 53,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 41,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 52,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 49,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 52,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 52,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 53,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 53,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 33,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                25,
                8,
                53
              ],
            "line": 8,
            "endcolumn": 53,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                12
              ],
            "line": 8,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 44,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 33,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 44,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 40,
            "column": 37
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 44,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 44,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 44,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                44
              ],
            "line": 11,
            "endcolumn": 44,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 14,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                13,
                20,
                19,
                6
              ],
            "line": 13,
            "endcolumn": 6,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                19,
                6
              ],
            "line": 13,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 55
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 72,
            "column": 65
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 72,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 35,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 40,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 40,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 40,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 60,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 51,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 60,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 60,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 60,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 61,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 61,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 14,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 27,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                13,
                15,
                29
              ],
            "line": 15,
            "endcolumn": 23,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 22,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 33,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 55,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 41,
            "column": 41
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 47,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 47,
            "column": 41
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 50,
            "column": 41
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 50,
            "column": 41
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 54,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 54,
            "column": 41
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 38,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 55,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                13,
                16,
                56
              ],
            "line": 16,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 30,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 30,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 30,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                17,
                17,
                30
              ],
            "line": 17,
            "endcolumn": 22,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 64,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 35,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 64,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 41,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 44,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 44,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 48,
            "column": 45
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 48,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 48,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 64,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 56,
            "column": 51
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 63,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 60,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 63,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 63,
            "column": 63
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 63,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 64,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 67,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 18,
            "stmt": [
                18,
                13,
                18,
                67
              ],
            "line": 18,
            "endcolumn": 67,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 14,
            "stmt": [
                13,
                20,
                14,
                63
              ],
            "line": 13,
            "endcolumn": 63,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                5,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                11
              ],
            "line": 20,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                11
              ],
            "line": 20,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                26,
                21,
                47
              ],
            "line": 21,
            "endcolumn": 45,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                26,
                21,
                47
              ],
            "line": 21,
            "endcolumn": 47,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                26,
                21,
                47
              ],
            "line": 21,
            "endcolumn": 47,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                26,
                21,
                47
              ],
            "line": 21,
            "endcolumn": 47,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                26,
                21,
                47
              ],
            "line": 21,
            "endcolumn": 47,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 21,
            "stmt": [
                21,
                5,
                21,
                23
              ],
            "line": 21,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                1,
                20,
                11
              ],
            "line": 20,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                40
              ],
            "line": 23,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                40
              ],
            "line": 23,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 39,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 42,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 42,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 71,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 54,
            "column": 51
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 54,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 54,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 69,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 62,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 69,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 69,
            "column": 65
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 69,
            "column": 60
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 70,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 47,
            "column": 45
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 71,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 25,
            "endcolumn": 71,
            "column": 71
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 71,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 24,
            "stmt": [
                24,
                5,
                25,
                73
              ],
            "line": 24,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 34,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 46,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 46,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 42,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 46,
            "column": 42
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 46,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 47,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 47,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                47
              ],
            "line": 26,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                40
              ],
            "line": 23,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                1,
                23,
                40
              ],
            "line": 23,
            "endcolumn": 40,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                31
              ],
            "line": 28,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                31
              ],
            "line": 28,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 16,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 39,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 39,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 39,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 43,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 29,
            "stmt": [
                29,
                5,
                29,
                43
              ],
            "line": 29,
            "endcolumn": 43,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                30,
                16,
                33,
                30
              ],
            "line": 30,
            "endcolumn": 30,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                33,
                30
              ],
            "line": 30,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 46,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 52,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                52
              ],
            "line": 31,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 65,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 65,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 45,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 65,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 64,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 61,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 64,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 64,
            "column": 64
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 64,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 65,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 68,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 32,
            "stmt": [
                32,
                13,
                32,
                68
              ],
            "line": 32,
            "endcolumn": 68,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                13,
                33,
                24
              ],
            "line": 33,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                13,
                33,
                24
              ],
            "line": 33,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                13,
                33,
                24
              ],
            "line": 33,
            "endcolumn": 22,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                16,
                30,
                50
              ],
            "line": 30,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 36,
            "stmt": [
                34,
                16,
                36,
                6
              ],
            "line": 34,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                36,
                6
              ],
            "line": 34,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 46,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                16,
                34,
                50
              ],
            "line": 34,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                31
              ],
            "line": 28,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 28,
            "stmt": [
                28,
                1,
                28,
                31
              ],
            "line": 28,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                18
              ],
            "line": 37,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                18
              ],
            "line": 37,
            "endcolumn": 18,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 16,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 24,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 39,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 36,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 39,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 39,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 40,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 43,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 38,
            "stmt": [
                38,
                5,
                38,
                43
              ],
            "line": 38,
            "endcolumn": 43,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                39,
                16,
                42,
                75
              ],
            "line": 39,
            "endcolumn": 75,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                42,
                75
              ],
            "line": 39,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 46,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 32,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 51,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 52,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 40,
            "stmt": [
                40,
                9,
                40,
                61
              ],
            "line": 40,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 31,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 31,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 21,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 22,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 26,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 31,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 31,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 31,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 41,
            "stmt": [
                41,
                9,
                41,
                32
              ],
            "line": 41,
            "endcolumn": 16,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 66,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 66,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 45,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 48,
            "column": 48
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 48,
            "column": 43
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 66,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 57,
            "column": 52
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 65,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 62,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 62,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 65,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 65,
            "column": 65
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 65,
            "column": 65
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 65,
            "column": 61
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 66,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 69,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 42,
            "stmt": [
                42,
                13,
                42,
                69
              ],
            "line": 42,
            "endcolumn": 69,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 39,
            "stmt": [
                39,
                16,
                39,
                50
              ],
            "line": 39,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                43,
                16,
                45,
                6
              ],
            "line": 43,
            "endcolumn": 6,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                45,
                6
              ],
            "line": 43,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 46,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 49,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 50
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 43,
            "stmt": [
                43,
                16,
                43,
                50
              ],
            "line": 43,
            "endcolumn": 50,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 37,
            "stmt": [
                37,
                1,
                37,
                18
              ],
            "line": 37,
            "endcolumn": 18,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                1,
                1,
                45,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 45,
            "stmt": [
                1,
                1,
                45,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "63",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "empty",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "63",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "fromSet",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu8",
            "op": "StoreVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "Cut"
          },
        {
            "pc": "24",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu8",
            "op": "LoadVar"
          },
        {
            "value": "$accu8",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "$accu8",
            "op": "StoreVar"
          },
        {
            "pc": "14",
            "op": "Jump"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": "$accu8",
            "op": "LoadVar"
          },
        {
            "value": "$accu8",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "pc": "63",
            "op": "Jump"
          },
        {
            "args": "a",
            "name": "fromList",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "StoreVar"
          },
        {
            "value": "a",
            "op": "LoadVar"
          },
        {
            "value": "a",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "Cut"
          },
        {
            "pc": "60",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "53",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "37",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "bg"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "37",
            "op": "Jump"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "bg",
            "op": "Return"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "66"
              },
            "op": "Push"
          },
        {
            "value": "bag$multiplicity",
            "op": "Builtin"
          },
        {
            "pc": "85",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "multiplicity",
            "op": "Frame"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "79",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "83",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "88"
              },
            "op": "Push"
          },
        {
            "value": "bag$size",
            "op": "Builtin"
          },
        {
            "pc": "107",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "size",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "c",
            "key": "_",
            "op": "Cut"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "pc": "104",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "count",
            "op": "LoadVar"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "pc": "94",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "110"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmin",
            "op": "Builtin"
          },
        {
            "pc": "126",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmin",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "min",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "129"
              },
            "op": "Push"
          },
        {
            "value": "bag$bmax",
            "op": "Builtin"
          },
        {
            "pc": "154",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bmax",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "arity": 1,
            "value": "max",
            "op": "Nary"
          },
        {
            "value": "count",
            "op": "StoreVar"
          },
        {
            "result": "count",
            "op": "Return"
          },
        {
            "value": "count",
            "op": "DelVar"
          },
        {
            "pc": "154",
            "op": "Jump"
          },
        {
            "args": "bg",
            "name": "bchoose",
            "op": "Frame"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "value": "elt",
            "op": "StoreVar"
          },
        {
            "result": "elt",
            "op": "Return"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "157"
              },
            "op": "Push"
          },
        {
            "value": "bag$add",
            "op": "Builtin"
          },
        {
            "pc": "183",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "add",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "176",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "pc": "182",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Push"
          },
        {
            "value": "bag$remove",
            "op": "Builtin"
          },
        {
            "pc": "318",
            "op": "Jump"
          },
        {
            "args": "(bg, elt)",
            "name": "remove",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "226",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Dup"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "op": "StoreVar"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "226",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "result"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "elt",
            "op": "LoadVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "DelVar"
          },
        {
            "value": "elt",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "pc": "318",
            "op": "Jump"
          },
        {
            "args": "(bg, k)",
            "name": "combinations",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "242",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "317",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "88"
              },
            "op": "Apply"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "255",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "317",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "267",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "317",
            "op": "Jump"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "110"
              },
            "op": "Apply"
          },
        {
            "value": "hd",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "bg",
            "op": "LoadVar"
          },
        {
            "value": "bg",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "186"
              },
            "op": "Apply"
          },
        {
            "value": "tl",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu231",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "229"
              },
            "op": "Apply"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "303",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu231",
            "op": "LoadVar"
          },
        {
            "value": "$accu231",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "hd",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "157"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu231",
            "op": "StoreVar"
          },
        {
            "pc": "289",
            "op": "Jump"
          },
        {
            "value": "hd",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu231",
            "op": "LoadVar"
          },
        {
            "value": "$accu231",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "tl",
            "op": "LoadVar"
          },
        {
            "value": "tl",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "229"
              },
            "op": "Apply"
          },
        {
            "arity": 2,
            "value": "|",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "network"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "778",
            "op": "Jump"
          },
        {
            "args": "m",
            "name": "send",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": {
                "type": "pc",
                "value": "157"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "network"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "network"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "778",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "server",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "address"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "(t, v, received)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "pc": "460",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu301",
            "op": "StoreVar"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "network"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "value": "received",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "Cut"
          },
        {
            "pc": "384",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "read"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "write"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "pc": "363",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu301",
            "op": "LoadVar"
          },
        {
            "value": "$accu301",
            "op": "DelVar"
          },
        {
            "value": "k",
            "op": "LoadVar"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu301",
            "op": "StoreVar"
          },
        {
            "pc": "363",
            "op": "Jump"
          },
        {
            "value": "k",
            "op": "DelVar"
          },
        {
            "value": "$accu301",
            "op": "LoadVar"
          },
        {
            "value": "$accu301",
            "op": "DelVar"
          },
        {
            "op": "Dup"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "395",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "op": "Pop"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "354",
            "op": "Jump"
          },
        {
            "op": "Choose"
          },
        {
            "value": "m",
            "op": "StoreVar"
          },
        {
            "pc": "401",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "354",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": "received",
            "op": "LoadVar"
          },
        {
            "value": "received",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "|",
            "op": "Nary"
          },
        {
            "value": "received",
            "op": "StoreVar"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "atom",
                "value": "write"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "425",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "t",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": ">",
            "op": "Nary"
          },
        {
            "pc": "426",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "438",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "t"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "v"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-2"
                  }
              },
            "op": "Push"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "count": "2",
            "op": "Split"
          },
        {
            "offset": "3",
            "op": "Move"
          },
        {
            "offset": "2",
            "op": "Move"
          },
        {
            "op": "StoreVar"
          },
        {
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "response"
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "dst"
              },
            "op": "Push"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "src"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "t",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "324"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "352",
            "op": "Jump"
          },
        {
            "value": "received",
            "op": "DelVar"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "778",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "init",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "pc": "479",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "339"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "True",
            "op": "Spawn"
          },
        {
            "pc": "470",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "778",
            "op": "Jump"
          },
        {
            "args": "(uid, phase)",
            "name": "receive",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu416",
            "op": "StoreVar"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "network"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": "c",
            "key": "m",
            "op": "Cut"
          },
        {
            "pc": "519",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "atom",
                "value": "response"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "508",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "dst"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "phase",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "509",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "pc": "486",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu416",
            "op": "LoadVar"
          },
        {
            "value": "$accu416",
            "op": "DelVar"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": "c",
            "op": "LoadVar"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": "$accu416",
            "op": "StoreVar"
          },
        {
            "pc": "486",
            "op": "Jump"
          },
        {
            "value": "c",
            "op": "DelVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": "phase",
            "op": "DelVar"
          },
        {
            "value": "uid",
            "op": "DelVar"
          },
        {
            "value": "$accu416",
            "op": "LoadVar"
          },
        {
            "value": "$accu416",
            "op": "DelVar"
          },
        {
            "value": "msgs",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "pc",
                "value": "229"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "msgs",
            "op": "LoadVar"
          },
        {
            "value": "msgs",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "quorums",
            "op": "StoreVar"
          },
        {
            "result": "quorums",
            "op": "Return"
          },
        {
            "value": "quorums",
            "op": "DelVar"
          },
        {
            "pc": "778",
            "op": "Jump"
          },
        {
            "args": "uid",
            "name": "read",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "read"
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "src"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "324"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "481"
              },
            "op": "Apply"
          },
        {
            "op": "Dup"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "571",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "op": "Pop"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "555",
            "op": "Jump"
          },
        {
            "op": "Choose"
          },
        {
            "value": "msgs",
            "op": "StoreVar"
          },
        {
            "pc": "577",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "555",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu500",
            "op": "StoreVar"
          },
        {
            "value": "msgs",
            "op": "LoadVar"
          },
        {
            "value": "msgs",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "m",
            "op": "Cut"
          },
        {
            "pc": "596",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu500",
            "op": "LoadVar"
          },
        {
            "value": "$accu500",
            "op": "DelVar"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu500",
            "op": "StoreVar"
          },
        {
            "pc": "584",
            "op": "Jump"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": "$accu500",
            "op": "LoadVar"
          },
        {
            "value": "$accu500",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "max",
            "op": "Nary"
          },
        {
            "value": "(t, v)",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "write"
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "src"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "t",
            "op": "LoadVar"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "324"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "value": "contents",
            "op": "StoreVar"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "481"
              },
            "op": "Apply"
          },
        {
            "op": "Dup"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "642",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "op": "Pop"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "626",
            "op": "Jump"
          },
        {
            "value": "uid",
            "op": "DelVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "msgs",
            "op": "StoreVar"
          },
        {
            "value": "msgs",
            "op": "DelVar"
          },
        {
            "pc": "650",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "626",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "contents",
            "op": "Return"
          },
        {
            "value": "contents",
            "op": "DelVar"
          },
        {
            "pc": "778",
            "op": "Jump"
          },
        {
            "args": "(uid, v)",
            "name": "write",
            "op": "Frame"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "read"
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "src"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "324"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "481"
              },
            "op": "Apply"
          },
        {
            "op": "Dup"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "685",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "op": "Pop"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "669",
            "op": "Jump"
          },
        {
            "op": "Choose"
          },
        {
            "value": "msgs",
            "op": "StoreVar"
          },
        {
            "pc": "691",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "669",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu604",
            "op": "StoreVar"
          },
        {
            "value": "msgs",
            "op": "LoadVar"
          },
        {
            "value": "msgs",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "keys",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "m",
            "op": "Cut"
          },
        {
            "pc": "710",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu604",
            "op": "LoadVar"
          },
        {
            "value": "$accu604",
            "op": "DelVar"
          },
        {
            "value": "m",
            "op": "LoadVar"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu604",
            "op": "StoreVar"
          },
        {
            "pc": "698",
            "op": "Jump"
          },
        {
            "value": "m",
            "op": "DelVar"
          },
        {
            "value": "$accu604",
            "op": "LoadVar"
          },
        {
            "value": "$accu604",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "max",
            "op": "Nary"
          },
        {
            "value": "(t, _)",
            "op": "StoreVar"
          },
        {
            "value": "_",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "t",
            "op": "LoadVar"
          },
        {
            "value": "t",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "Closure",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "nt",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "type"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "write"
              },
            "op": "Push"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "src"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": "value"
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "nt",
            "op": "LoadVar"
          },
        {
            "value": "nt",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "DictAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "324"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "uid",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "481"
              },
            "op": "Apply"
          },
        {
            "op": "Dup"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "767",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "op": "Pop"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "751",
            "op": "Jump"
          },
        {
            "value": "uid",
            "op": "DelVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "msgs",
            "op": "StoreVar"
          },
        {
            "value": "msgs",
            "op": "DelVar"
          },
        {
            "pc": "775",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "pc": "751",
            "op": "Jump"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "symbols": {

  },
  "nodes": [
    {
      "idx": 0,
      "transitions": [

      ],
      "type": "initial"
    }
  ],
  "profile": [
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0
  ]
}
