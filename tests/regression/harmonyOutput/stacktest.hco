{
  "nstates": 2,
  "issue": "No issues",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpoigkn1jf/stacktest.hny",
            "lines": [
                "from stack import Stack, push, pop",
                "",
                "teststack = Stack()",
                "push(?teststack, 1)",
                "push(?teststack, 2)",
                "v = pop(?teststack)",
                "assert v == 2",
                "push(?teststack, 3)",
                "v = pop(?teststack)",
                "assert v == 3",
                "v = pop(?teststack)",
                "assert v == 1"
              ],
            "identifiers": {
                "teststack": "global",
                "stack": "module",
                "this": "local-var",
                "v": "global",
                "Stack": "imported",
                "___": "___",
                "pop": "imported",
                "push": "imported"
              }
          },
        "stack": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpoigkn1jf/stack.hny",
            "lines": [
                "def Stack() returns stack:",
                "    stack = []",
                "",
                "def push(st, v):",
                "    (!st)[len(!st)] = v",
                "",
                "def pop(st) returns next:",
                "    let n = len(!st) - 1:",
                "        next = (!st)[n]",
                "        del (!st)[n]"
              ],
            "identifiers": {
                "n": "local-const",
                "this": "local-var",
                "v": "local-const",
                "Stack": "constant",
                "___": "___",
                "pop": "constant",
                "st": "local-const",
                "push": "constant"
              }
          }
      },
    "labels": {
        "__end__": 99
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 40",
            "jump over method definition: set program counter to 40"
          ],
        [
            "Frame Stack()",
            "start of method Stack"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "StoreVar stack",
            "pop a value and store in stack"
          ],
        [
            "ReturnOp(stack)",
            "restore caller method state and push stack"
          ],
        [
            "DelVar stack",
            "delete method variable stack"
          ],
        [
            "Jump 40",
            "jump over method definition: set program counter to 40"
          ],
        [
            "Frame push(st, v)",
            "start of method push"
          ],
        [
            "LoadVar st",
            "push the value of st"
          ],
        [
            "LoadVar st",
            "push the value of st"
          ],
        [
            "DelVar st",
            "delete method variable st"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "LoadVar v",
            "push the value of v"
          ],
        [
            "DelVar v",
            "delete method variable v"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 40",
            "jump over method definition: set program counter to 40"
          ],
        [
            "Frame pop(st)",
            "start of method pop"
          ],
        [
            "LoadVar st",
            "push the value of st"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "StoreVar n",
            "pop a value and store in n"
          ],
        [
            "LoadVar st",
            "push the value of st"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "StoreVar next",
            "pop a value and store in next"
          ],
        [
            "LoadVar st",
            "push the value of st"
          ],
        [
            "DelVar st",
            "delete method variable st"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Del",
            "pop an address and delete the shared variable at the address"
          ],
        [
            "ReturnOp(next)",
            "restore caller method state and push next"
          ],
        [
            "DelVar next",
            "delete method variable next"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "Apply PC(2)",
            "call method PC(2)"
          ],
        [
            "Store teststack",
            "pop a value and store it in shared variable teststack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?teststack",
            "push constant ?teststack"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(8)",
            "call method PC(8)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?teststack",
            "push constant ?teststack"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(8)",
            "call method PC(8)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ?teststack",
            "push constant ?teststack"
          ],
        [
            "Apply PC(20)",
            "call method PC(20)"
          ],
        [
            "Store v",
            "pop a value and store it in shared variable v"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load v",
            "push value of shared variable v"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?teststack",
            "push constant ?teststack"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(8)",
            "call method PC(8)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Push ?teststack",
            "push constant ?teststack"
          ],
        [
            "Apply PC(20)",
            "call method PC(20)"
          ],
        [
            "Store v",
            "pop a value and store it in shared variable v"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load v",
            "push value of shared variable v"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?teststack",
            "push constant ?teststack"
          ],
        [
            "Apply PC(20)",
            "call method PC(20)"
          ],
        [
            "Store v",
            "pop a value and store it in shared variable v"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load v",
            "push value of shared variable v"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                1,
                1,
                13,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                26
              ],
            "line": 1,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                26
              ],
            "line": 1,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                14
              ],
            "line": 2,
            "endcolumn": 14,
            "column": 13
          },
        {
            "module": "stack",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                14
              ],
            "line": 2,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "stack",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                26
              ],
            "line": 1,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                26
              ],
            "line": 1,
            "endcolumn": 26,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                16
              ],
            "line": 4,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                16
              ],
            "line": 4,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 8,
            "column": 7
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 17,
            "column": 16
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 17,
            "column": 15
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 11
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "stack",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                23
              ],
            "line": 5,
            "endcolumn": 21,
            "column": 5
          },
        {
            "module": "stack",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                16
              ],
            "line": 4,
            "endcolumn": 16,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                25
              ],
            "line": 7,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                25
              ],
            "line": 7,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "stack",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "stack",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "stack",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "stack",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 24,
            "column": 13
          },
        {
            "module": "stack",
            "endline": 8,
            "stmt": [
                8,
                5,
                8,
                24
              ],
            "line": 8,
            "endcolumn": 11,
            "column": 5
          },
        {
            "module": "stack",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                23
              ],
            "line": 9,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "stack",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                23
              ],
            "line": 9,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "stack",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                23
              ],
            "line": 9,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "stack",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                23
              ],
            "line": 9,
            "endcolumn": 23,
            "column": 16
          },
        {
            "module": "stack",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                23
              ],
            "line": 9,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "stack",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                20
              ],
            "line": 10,
            "endcolumn": 16,
            "column": 15
          },
        {
            "module": "stack",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                20
              ],
            "line": 10,
            "endcolumn": 16,
            "column": 15
          },
        {
            "module": "stack",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                20
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "stack",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                20
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "stack",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                20
              ],
            "line": 10,
            "endcolumn": 20,
            "column": 13
          },
        {
            "module": "stack",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                20
              ],
            "line": 10,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "stack",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                25
              ],
            "line": 7,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "stack",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                25
              ],
            "line": 7,
            "endcolumn": 25,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 11,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 15,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                19
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 15,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                1,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 18,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                13
              ],
            "line": 7,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 18,
            "column": 6
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                19
              ],
            "line": 8,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                19
              ],
            "line": 9,
            "endcolumn": 18,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                19
              ],
            "line": 9,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                19
              ],
            "line": 9,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                13
              ],
            "line": 10,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                19
              ],
            "line": 11,
            "endcolumn": 18,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                19
              ],
            "line": 11,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                1,
                11,
                19
              ],
            "line": 11,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 8,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 13,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                13
              ],
            "line": 12,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                1,
                1,
                13,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                1,
                1,
                13,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "40",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "Stack",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "stack",
            "op": "StoreVar"
          },
        {
            "result": "stack",
            "op": "Return"
          },
        {
            "value": "stack",
            "op": "DelVar"
          },
        {
            "pc": "40",
            "op": "Jump"
          },
        {
            "args": "(st, v)",
            "name": "push",
            "op": "Frame"
          },
        {
            "value": "st",
            "op": "LoadVar"
          },
        {
            "value": "st",
            "op": "LoadVar"
          },
        {
            "value": "st",
            "op": "DelVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": "v",
            "op": "LoadVar"
          },
        {
            "value": "v",
            "op": "DelVar"
          },
        {
            "op": "Store"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "40",
            "op": "Jump"
          },
        {
            "args": "st",
            "name": "pop",
            "op": "Frame"
          },
        {
            "value": "st",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": "n",
            "op": "StoreVar"
          },
        {
            "value": "st",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": "next",
            "op": "StoreVar"
          },
        {
            "value": "st",
            "op": "LoadVar"
          },
        {
            "value": "st",
            "op": "DelVar"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Del"
          },
        {
            "result": "next",
            "op": "Return"
          },
        {
            "value": "next",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Apply"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "teststack"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "teststack"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "8"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "teststack"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "8"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "teststack"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "20"
              },
            "op": "Apply"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "v"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "v"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "teststack"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "8"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "teststack"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "20"
              },
            "op": "Apply"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "v"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "v"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "teststack"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "20"
              },
            "op": "Apply"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "v"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "v"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "symbols": {

  },
  "nodes": [
    {
      "idx": 0,
      "transitions": [

      ],
      "type": "initial"
    }
  ],
  "profile": [
    1,
    1,
    1,
    1,
    1,
    1,
    0,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    0,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    0
  ]
}
