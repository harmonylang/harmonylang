{
  "nstates": 617,
  "issue": "No issues",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpoigkn1jf/spinlock.hny",
            "lines": [
                "const N = 3",
                "",
                "in_cs = 0",
                "invariant in_cs in { 0, 1 }",
                "",
                "shared = False",
                "private = [ True, ] * N",
                "invariant len(x for x in [shared,] + private where not x) <= 1",
                "",
                "def test_and_set(s, p):",
                "    atomically:",
                "        !p = !s",
                "        !s = True",
                "",
                "def clear(s):",
                "    assert !s",
                "    atomically !s = False",
                "",
                "def thread(self):",
                "    while choose({ False, True }):",
                "        # Enter critical section",
                "        while private[self]:",
                "            test_and_set(?shared, ?private[self])",
                "",
                "        atomically in_cs += 1",
                "        assert not private[self]",
                "        atomically in_cs -= 1",
                "",
                "        # Leave critical section",
                "        private[self] = True",
                "        clear(?shared)",
                "",
                "for i in {0..N-1}:",
                "    spawn thread(i)"
              ],
            "identifiers": {
                "thread": "constant",
                "shared": "global",
                "self": "local-const",
                "x": "local-const",
                "i": "local-const",
                "in_cs": "global",
                "test_and_set": "constant",
                "clear": "constant",
                "this": "local-var",
                "private": "global",
                "p": "local-const",
                "s": "local-const",
                "___": "___",
                "N": "constant"
              }
          }
      },
    "labels": {
        "__end__": 159
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "Jump 14",
            "jump over invariant definition: set program counter to 14"
          ],
        [
            "Frame invariant()",
            "start of method invariant"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "2-ary in",
            "pop 2 values and push the result of applying in"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Invariant 4",
            "test invariant"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store shared",
            "pop a value and store it in shared variable shared"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "2-ary *",
            "pop 2 values and push the result of applying *"
          ],
        [
            "Store private",
            "pop a value and store it in shared variable private"
          ],
        [
            "Jump 53",
            "jump over invariant definition: set program counter to 53"
          ],
        [
            "Frame invariant()",
            "start of method invariant"
          ],
        [
            "Push ()",
            "initialize accumulator for list comprehension: push constant ()"
          ],
        [
            "StoreVar $accu25",
            "initialize accumulator for list comprehension: pop a value and store in $accu25"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Load shared",
            "push value of shared variable shared"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Load private",
            "push value of shared variable private"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "Cut(x)",
            "get next element and assign to x; push False or True depending on success"
          ],
        [
            "JumpCond False 45",
            "check if loop is done: pop a value and jump to 45 if the value is False"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "JumpCond True 33",
            "pop a value and jump to 33 if the value is True"
          ],
        [
            "LoadVar $accu25",
            "load accumulator: push the value of $accu25"
          ],
        [
            "DelVar $accu25",
            "delete method variable $accu25"
          ],
        [
            "LoadVar x",
            "push the value of x"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "StoreVar $accu25",
            "update accumulator: pop a value and store in $accu25"
          ],
        [
            "Jump 33",
            "set program counter to 33"
          ],
        [
            "DelVar x",
            "delete method variable x"
          ],
        [
            "LoadVar $accu25",
            "load final accumulator result: push the value of $accu25"
          ],
        [
            "DelVar $accu25",
            "delete method variable $accu25"
          ],
        [
            "1-ary len",
            "pop 1 value and push the result of applying len"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary <=",
            "pop 2 values and push the result of applying <="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Invariant 24",
            "test invariant"
          ],
        [
            "Jump 141",
            "jump over method definition: set program counter to 141"
          ],
        [
            "Frame test_and_set(s, p)",
            "start of method test_and_set"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar p",
            "push the value of p"
          ],
        [
            "DelVar p",
            "delete method variable p"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 141",
            "jump over method definition: set program counter to 141"
          ],
        [
            "Frame clear(s)",
            "start of method clear"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Jump 141",
            "jump over method definition: set program counter to 141"
          ],
        [
            "Frame thread(self)",
            "start of method thread"
          ],
        [
            "Push {}",
            "push constant {}"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "JumpCond False 139",
            "pop a value and jump to 139 if the value is False"
          ],
        [
            "Push ?private",
            "push constant ?private"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 108",
            "pop a value and jump to 108 if the value is False"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?shared",
            "push constant ?shared"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ?private",
            "push constant ?private"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Apply PC(55)",
            "call method PC(55)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 93",
            "set program counter to 93"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push ?private",
            "push constant ?private"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "1-ary not",
            "pop 1 value and push the result of applying not"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "AtomicInc(eager)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "Load in_cs",
            "push value of shared variable in_cs"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "Store in_cs",
            "pop a value and store it in shared variable in_cs"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "Push ?private",
            "push constant ?private"
          ],
        [
            "LoadVar self",
            "push the value of self"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?shared",
            "push constant ?shared"
          ],
        [
            "Apply PC(69)",
            "call method PC(69)"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 86",
            "set program counter to 86"
          ],
        [
            "DelVar self",
            "delete method variable self"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary -",
            "pop 2 values and push the result of applying -"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 156",
            "check if loop is done: pop a value and jump to 156 if the value is False"
          ],
        [
            "Push ?PC(85)",
            "push constant ?PC(85)"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push {:}",
            "push constant {:}"
          ],
        [
            "Spawn",
            "pop thread-local state, argument, and pc and spawn a new thread"
          ],
        [
            "Jump 147",
            "set program counter to 147"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                1,
                1,
                35,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                9
              ],
            "line": 3,
            "endcolumn": 9,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                9
              ],
            "line": 3,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 15,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 25,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 27,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                1,
                4,
                27
              ],
            "line": 4,
            "endcolumn": 27,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                14
              ],
            "line": 6,
            "endcolumn": 14,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                1,
                6,
                14
              ],
            "line": 6,
            "endcolumn": 8,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 23,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                1,
                7,
                23
              ],
            "line": 7,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 62,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 33,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 44,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 44,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 56
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 56
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 56,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 57,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 62,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 62,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 62,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 62,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                62
              ],
            "line": 8,
            "endcolumn": 62,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 15,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                9,
                12,
                15
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 10,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 17,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                13,
                9,
                13,
                17
              ],
            "line": 13,
            "endcolumn": 12,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 11,
            "stmt": [
                11,
                5,
                11,
                15
              ],
            "line": 11,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                1,
                10,
                23
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                13
              ],
            "line": 15,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                13
              ],
            "line": 15,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 13,
            "column": 12
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 10,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 16,
            "stmt": [
                16,
                5,
                16,
                13
              ],
            "line": 16,
            "endcolumn": 13,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                16,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                16,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                16,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                16,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                16,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 19,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 17,
            "stmt": [
                17,
                16,
                17,
                25
              ],
            "line": 17,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 15,
            "stmt": [
                15,
                1,
                15,
                13
              ],
            "line": 15,
            "endcolumn": 13,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 24,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 30,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 33,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 9,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 27,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 27,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 27,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 13,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 48,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 32,
            "column": 27
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 48,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 42,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 47,
            "column": 44
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 48,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 48,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 49,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 23,
            "stmt": [
                23,
                13,
                23,
                49
              ],
            "line": 23,
            "endcolumn": 49,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 22,
            "stmt": [
                22,
                9,
                22,
                28
              ],
            "line": 22,
            "endcolumn": 28,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                20,
                25,
                29
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                20,
                25,
                29
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                20,
                25,
                29
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                20,
                25,
                29
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                20,
                25,
                29
              ],
            "line": 25,
            "endcolumn": 27,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 25,
            "stmt": [
                25,
                20,
                25,
                29
              ],
            "line": 25,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 31,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 14,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 26,
            "stmt": [
                26,
                9,
                26,
                32
              ],
            "line": 26,
            "endcolumn": 32,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                20,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                20,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                20,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 29,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                20,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                20,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 27,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 27,
            "stmt": [
                27,
                20,
                27,
                29
              ],
            "line": 27,
            "endcolumn": 29,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                28
              ],
            "line": 30,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                28
              ],
            "line": 30,
            "endcolumn": 20,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                28
              ],
            "line": 30,
            "endcolumn": 21,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                28
              ],
            "line": 30,
            "endcolumn": 28,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 30,
            "stmt": [
                30,
                9,
                30,
                28
              ],
            "line": 30,
            "endcolumn": 23,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                22
              ],
            "line": 31,
            "endcolumn": 21,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                22
              ],
            "line": 31,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 31,
            "stmt": [
                31,
                9,
                31,
                22
              ],
            "line": 31,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 20,
            "stmt": [
                20,
                5,
                20,
                34
              ],
            "line": 20,
            "endcolumn": 34,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 19,
            "stmt": [
                19,
                1,
                19,
                17
              ],
            "line": 19,
            "endcolumn": 17,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 11,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 16,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 16,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 16,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 11
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 34,
            "stmt": [
                34,
                5,
                34,
                19
              ],
            "line": 34,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 33,
            "stmt": [
                33,
                1,
                33,
                17
              ],
            "line": 33,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                1,
                1,
                35,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                1,
                1,
                35,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 35,
            "stmt": [
                1,
                1,
                35,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "14",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "invariant",
            "op": "Frame"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "in",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "4",
            "op": "Invariant",
            "pre": "False"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "shared"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "*",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "private"
                  }
              ],
            "op": "Store"
          },
        {
            "pc": "53",
            "op": "Jump"
          },
        {
            "args": "()",
            "name": "invariant",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu25",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "shared"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "private"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "Cut"
          },
        {
            "pc": "45",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "pc": "33",
            "cond": {
                "type": "bool",
                "value": "True"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu25",
            "op": "LoadVar"
          },
        {
            "value": "$accu25",
            "op": "DelVar"
          },
        {
            "value": "x",
            "op": "LoadVar"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "$accu25",
            "op": "StoreVar"
          },
        {
            "pc": "33",
            "op": "Jump"
          },
        {
            "value": "x",
            "op": "DelVar"
          },
        {
            "value": "$accu25",
            "op": "LoadVar"
          },
        {
            "value": "$accu25",
            "op": "DelVar"
          },
        {
            "arity": 1,
            "value": "len",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "<=",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "24",
            "op": "Invariant",
            "pre": "False"
          },
        {
            "pc": "141",
            "op": "Jump"
          },
        {
            "args": "(s, p)",
            "name": "test_and_set",
            "op": "Frame"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "p",
            "op": "LoadVar"
          },
        {
            "value": "p",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "op": "Store"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "141",
            "op": "Jump"
          },
        {
            "args": "s",
            "name": "clear",
            "op": "Frame"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "op": "Load"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "pc": "141",
            "op": "Jump"
          },
        {
            "args": "self",
            "name": "thread",
            "op": "Frame"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "pc": "139",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "private"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "108",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "shared"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "private"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "pc",
                "value": "55"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "93",
            "op": "Jump"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "private"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 1,
            "value": "not",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "lazy": "False",
            "op": "AtomicInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "in_cs"
                  }
              ],
            "op": "Store"
          },
        {
            "op": "AtomicDec"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "private"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "self",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "shared"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "pc",
                "value": "69"
              },
            "op": "Apply"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "86",
            "op": "Jump"
          },
        {
            "value": "self",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "-",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "156",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [

                  ],
                "func": {
                    "type": "pc",
                    "value": "85"
                  }
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "dict",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "eternal": "False",
            "op": "Spawn"
          },
        {
            "pc": "147",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "symbols": {

  },
  "nodes": [
    {
      "idx": 0,
      "component": 195,
      "transitions": [

      ],
      "type": "initial"
    }
  ],
  "profile": [
    1,
    1,
    1,
    1,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    40,
    40,
    40,
    32,
    32,
    7,
    7,
    7,
    7,
    7,
    7,
    7,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    8,
    1,
    1,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    0,
    3,
    6,
    6,
    6,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    0,
    18,
    21,
    21,
    21,
    21,
    21,
    36,
    36,
    36,
    36,
    36,
    21,
    21,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    18,
    3,
    3,
    3,
    3,
    3,
    3,
    6,
    6,
    6,
    6,
    6,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    18,
    18,
    1,
    1,
    1,
    1,
    1,
    1,
    4,
    4,
    3,
    3,
    3,
    3,
    3,
    3,
    3,
    1,
    1,
    0
  ]
}
