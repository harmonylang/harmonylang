{
  "nstates": 2,
  "issue": "Safety violation",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpoigkn1jf/baddblwait.hny",
            "lines": [
                "while forks[left]:",
                "    synch.wait(?conds[left], ?mutex)",
                "while forks[right]:",
                "    synch.wait(?conds[right], ?mutex)"
              ],
            "identifiers": {
                "left": "global",
                "this": "local-var",
                "___": "___",
                "right": "global",
                "forks": "global"
              }
          }
      },
    "labels": {
        "__end__": 41
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push ?forks",
            "push constant ?forks"
          ],
        [
            "Load left",
            "push value of shared variable left"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 20",
            "pop a value and jump to 20 if the value is False"
          ],
        [
            "Push ?synch",
            "push constant ?synch"
          ],
        [
            "Push \"wait\"",
            "push constant \"wait\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?conds",
            "push constant ?conds"
          ],
        [
            "Load left",
            "push value of shared variable left"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ?mutex",
            "push constant ?mutex"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 1",
            "set program counter to 1"
          ],
        [
            "Push ?forks",
            "push constant ?forks"
          ],
        [
            "Load right",
            "push value of shared variable right"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "JumpCond False 39",
            "pop a value and jump to 39 if the value is False"
          ],
        [
            "Push ?synch",
            "push constant ?synch"
          ],
        [
            "Push \"wait\"",
            "push constant \"wait\""
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?conds",
            "push constant ?conds"
          ],
        [
            "Load right",
            "push value of shared variable right"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ?mutex",
            "push constant ?mutex"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Pop",
            "discard the top value on the stack"
          ],
        [
            "Jump 20",
            "set program counter to 20"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                1,
                1,
                5,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                18
              ],
            "line": 1,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                18
              ],
            "line": 1,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                18
              ],
            "line": 1,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                18
              ],
            "line": 1,
            "endcolumn": 17,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                18
              ],
            "line": 1,
            "endcolumn": 5,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 14,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 26,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 27,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 31
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 35,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 36,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 36,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 2,
            "stmt": [
                2,
                5,
                2,
                36
              ],
            "line": 2,
            "endcolumn": 36,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                18
              ],
            "line": 1,
            "endcolumn": 18,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 17,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 18,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 5,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 14,
            "column": 10
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 14,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 21,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 27,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 28,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 36,
            "column": 32
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 36,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                37
              ],
            "line": 4,
            "endcolumn": 37,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                19
              ],
            "line": 3,
            "endcolumn": 19,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                1,
                1,
                5,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                1,
                1,
                5,
                6
              ],
            "line": 1,
            "endcolumn": 6,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "forks"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "left"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "20",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "synch"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "wait"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "conds"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "left"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "mutex"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "1",
            "op": "Jump"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "forks"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "right"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "pc": "39",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "synch"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "atom",
                "value": "wait"
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "conds"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "right"
                  }
              ],
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "mutex"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "op": "Pop"
          },
        {
            "pc": "20",
            "op": "Jump"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "7fa0c3ac4a0a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Push ?forks",
          "explain": "push constant ?forks",
          "explain2": { "text": "push constant ?forks", "args": [] },
          "npc": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "forks" } ] } ],
          "pc": "1"
        },

        {
          "code": "Load left",
          "explain": "push value of shared variable left",
          "explain2": { "text": "push value of shared variable left", "args": [] },
          "npc": "2",
          "failure": "Load: unknown variable ?left",
          "mode": "failed",
          "push": [ ],
          "pc": "2"
        }

      ],
      "ctxbag": {
          "7fa0b470003a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fa0b470003a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "2",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "forks" } ] }],
          "trace": [
{"pc": "2","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Load: unknown variable ?left",
          "this": { "type": "dict", "value": [] },
          "atomic": "1",
          "mode": "failed"
        }
      ]
    }

  ]
}
