{
  "nstates": 13,
  "issue": "No issues",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpoigkn1jf/triangle.hny",
            "lines": [
                "const N = 10",
                "",
                "def triangle(n) returns result:   # computes the n'th triangle number",
                "    result = 0",
                "    for i in {1..n}:     # for each integer from 1 to n inclusive",
                "        result += i      # add i to result",
                "",
                "x = choose {0..N}        # select an x between 0 and N inclusive",
                "assert triangle(x) == ((x * (x + 1)) / 2)"
              ],
            "identifiers": {
                "triangle": "constant",
                "x": "global",
                "n": "local-const",
                "i": "local-const",
                "this": "local-var",
                "___": "___",
                "N": "constant"
              }
          }
      },
    "labels": {
        "__end__": 44
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Jump 22",
            "jump over method definition: set program counter to 22"
          ],
        [
            "Frame triangle(n)",
            "start of method triangle"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "LoadVar n",
            "push the value of n"
          ],
        [
            "DelVar n",
            "delete method variable n"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(i)",
            "get next element and assign to i; push False or True depending on success"
          ],
        [
            "JumpCond False 20",
            "check if loop is done: pop a value and jump to 20 if the value is False"
          ],
        [
            "LoadVar result",
            "push the value of result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ],
        [
            "LoadVar i",
            "push the value of i"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "StoreVar result",
            "pop a value and store in result"
          ],
        [
            "Jump 11",
            "set program counter to 11"
          ],
        [
            "DelVar i",
            "delete method variable i"
          ],
        [
            "ReturnOp(result)",
            "restore caller method state and push result"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Push 10",
            "push constant 10"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "Store x",
            "pop a value and store it in shared variable x"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Load x",
            "push value of shared variable x"
          ],
        [
            "Apply PC(2)",
            "call method PC(2)"
          ],
        [
            "Load x",
            "push value of shared variable x"
          ],
        [
            "Load x",
            "push value of shared variable x"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "2-ary *",
            "pop 2 values and push the result of applying *"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary /",
            "pop 2 values and push the result of applying /"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                1,
                1,
                10,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                31
              ],
            "line": 3,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                31
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                14
              ],
            "line": 4,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                14
              ],
            "line": 4,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                4,
                14
              ],
            "line": 4,
            "endcolumn": 12,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 18
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 18,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 7,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 19,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                6,
                9,
                6,
                19
              ],
            "line": 6,
            "endcolumn": 17,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                5,
                5,
                5,
                19
              ],
            "line": 5,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                31
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                31
              ],
            "line": 3,
            "endcolumn": 31,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 13,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 16,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 16,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 17,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                1,
                8,
                17
              ],
            "line": 8,
            "endcolumn": 3,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 18,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 30,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 34,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 34,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 35,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 40,
            "column": 40
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 40,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 41,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                1,
                9,
                41
              ],
            "line": 9,
            "endcolumn": 41,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                1,
                1,
                10,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                1,
                1,
                10,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "pc": "22",
            "op": "Jump"
          },
        {
            "args": "n",
            "name": "triangle",
            "op": "Frame"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "value": "n",
            "op": "LoadVar"
          },
        {
            "value": "n",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "i",
            "op": "Cut"
          },
        {
            "pc": "20",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "result",
            "op": "LoadVar"
          },
        {
            "value": "result",
            "op": "DelVar"
          },
        {
            "value": "i",
            "op": "LoadVar"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "value": "result",
            "op": "StoreVar"
          },
        {
            "pc": "11",
            "op": "Jump"
          },
        {
            "value": "i",
            "op": "DelVar"
          },
        {
            "result": "result",
            "op": "Return"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 10
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "op": "Choose"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "x"
                  }
              ],
            "op": "Store"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "x"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "pc",
                "value": "2"
              },
            "op": "Apply"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "x"
                  }
              ],
            "op": "Load"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "x"
                  }
              ],
            "op": "Load"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "*",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "/",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "symbols": {

  },
  "nodes": [
    {
      "idx": 0,
      "transitions": [

      ],
      "type": "initial"
    }
  ],
  "profile": [
    1,
    1,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    66,
    66,
    55,
    55,
    55,
    55,
    55,
    55,
    55,
    11,
    11,
    1,
    1,
    1,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    11,
    0
  ]
}
