{
  "nstates": 28,
  "issue": "Safety violation",
  "hvm": {
    "modules": {
        "__main__": {
            "file": "/var/folders/6n/pjbfqj310fz0rt3tlz28gcdc0000gn/T/tmpoigkn1jf/hanoi.hny",
            "lines": [
                "current = [ [1, 2, 3], [], [] ]",
                "",
                "while current[2] != [1, 2, 3]:",
                "    let moves = { (s, d) for s in {0..2} for d in {0..2}",
                "        where current[s] != []",
                "        where (current[d] == []) or (current[s][0] < current[d][0]) }",
                "    let (src,dst) = choose moves:",
                "        print str(src) + \" -> \" + str(dst)",
                "        current[dst] = [current[src][0],] + current[dst]",
                "        del current[src][0]",
                "",
                "assert False"
              ],
            "identifiers": {
                "src": "local-const",
                "dst": "local-const",
                "d": "local-const",
                "moves": "local-const",
                "current": "global",
                "this": "local-var",
                "s": "local-const",
                "___": "___"
              }
          }
      },
    "labels": {
        "__end__": 136
      },
    "pretty": [
        [
            "Frame __init__()",
            "start of method __init__"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Store current",
            "pop a value and store it in shared variable current"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push 1",
            "push constant 1"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push 3",
            "push constant 3"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 128",
            "pop a value and jump to 128 if the value is False"
          ],
        [
            "Push {}",
            "initialize accumulator for set comprehension: push constant {}"
          ],
        [
            "StoreVar $accu28",
            "initialize accumulator for set comprehension: pop a value and store in $accu28"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Cut(s)",
            "get next element and assign to s; push False or True depending on success"
          ],
        [
            "JumpCond False 87",
            "check if loop is done: pop a value and jump to 87 if the value is False"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "Push 2",
            "push constant 2"
          ],
        [
            "2-ary ..",
            "pop 2 values and push the result of applying .."
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "Cut(d)",
            "get next element and assign to d; push False or True depending on success"
          ],
        [
            "JumpCond False 84",
            "check if loop is done: pop a value and jump to 84 if the value is False"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary !=",
            "pop 2 values and push the result of applying !="
          ],
        [
            "JumpCond False 40",
            "pop a value and jump to 40 if the value is False"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ()",
            "push constant ()"
          ],
        [
            "2-ary ==",
            "pop 2 values and push the result of applying =="
          ],
        [
            "JumpCond True 71",
            "pop a value and jump to 71 if the value is True"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary <",
            "pop 2 values and push the result of applying <"
          ],
        [
            "Jump 72",
            "set program counter to 72"
          ],
        [
            "Push True",
            "push constant True"
          ],
        [
            "JumpCond False 40",
            "pop a value and jump to 40 if the value is False"
          ],
        [
            "LoadVar $accu28",
            "load accumulator: push the value of $accu28"
          ],
        [
            "DelVar $accu28",
            "delete method variable $accu28"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "LoadVar s",
            "push the value of s"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "LoadVar d",
            "push the value of d"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "2-ary SetAdd",
            "pop 2 values and push the result of applying SetAdd"
          ],
        [
            "StoreVar $accu28",
            "update accumulator: pop a value and store in $accu28"
          ],
        [
            "Jump 40",
            "set program counter to 40"
          ],
        [
            "DelVar d",
            "delete method variable d"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "Jump 34",
            "set program counter to 34"
          ],
        [
            "DelVar s",
            "delete method variable s"
          ],
        [
            "LoadVar $accu28",
            "load final accumulator result: push the value of $accu28"
          ],
        [
            "DelVar $accu28",
            "delete method variable $accu28"
          ],
        [
            "StoreVar moves",
            "pop a value and store in moves"
          ],
        [
            "LoadVar moves",
            "push the value of moves"
          ],
        [
            "DelVar moves",
            "delete method variable moves"
          ],
        [
            "Choose",
            "pop a set value and push one of its elements"
          ],
        [
            "StoreVar (src, dst)",
            "pop a value and store in (src, dst)"
          ],
        [
            "LoadVar src",
            "push the value of src"
          ],
        [
            "1-ary str",
            "pop 1 value and push the result of applying str"
          ],
        [
            "Push \" -> \"",
            "push constant \" -> \""
          ],
        [
            "LoadVar dst",
            "push the value of dst"
          ],
        [
            "1-ary str",
            "pop 1 value and push the result of applying str"
          ],
        [
            "3-ary +",
            "pop 3 values and push the result of applying +"
          ],
        [
            "Print",
            "pop a value and add to print history"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar dst",
            "push the value of dst"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push ()",
            "building a tuple: push constant ()"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar src",
            "push the value of src"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary ListAdd",
            "pop 2 values and push the result of applying ListAdd"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar dst",
            "push the value of dst"
          ],
        [
            "DelVar dst",
            "delete method variable dst"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Load",
            "pop an address and push the value at the address"
          ],
        [
            "2-ary +",
            "pop 2 values and push the result of applying +"
          ],
        [
            "Store",
            "pop a value and an address and store the value at the address"
          ],
        [
            "Push ?current",
            "push constant ?current"
          ],
        [
            "LoadVar src",
            "push the value of src"
          ],
        [
            "DelVar src",
            "delete method variable src"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Push 0",
            "push constant 0"
          ],
        [
            "2-ary AddArg",
            "pop 2 values and push the result of applying AddArg"
          ],
        [
            "Del",
            "pop an address and delete the shared variable at the address"
          ],
        [
            "Jump 15",
            "set program counter to 15"
          ],
        [
            "AtomicInc(lazy)",
            "increment atomic counter of context; thread runs uninterrupted if larger than 0"
          ],
        [
            "ReadonlyInc",
            "increment readonly counter of context; thread cannot mutate shared variables if > 0"
          ],
        [
            "Push False",
            "push constant False"
          ],
        [
            "Assert",
            "pop a condition and raise exception if condition is false"
          ],
        [
            "ReadonlyDec",
            "decrement readonly counter of context"
          ],
        [
            "AtomicDec",
            "decrement atomic counter of context"
          ],
        [
            "ReturnOp(result. None)",
            "restore caller method state and push result"
          ],
        [
            "DelVar result",
            "delete method variable result"
          ]
      ],
    "locs": [
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                1,
                1,
                13,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 14,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 17,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 20,
            "column": 14
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 25,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 29,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 29,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 1,
            "stmt": [
                1,
                1,
                1,
                31
              ],
            "line": 1,
            "endcolumn": 9,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 15,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 16,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 22,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 25,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 28,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 28,
            "column": 22
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 29,
            "column": 7
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 5,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 36,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 39,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 39,
            "column": 36
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 52,
            "column": 52
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 55,
            "column": 55
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 55,
            "column": 52
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 19,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 5,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 5,
            "endcolumn": 24,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 5,
            "endcolumn": 30,
            "column": 29
          },
        {
            "module": "__main__",
            "endline": 5,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 5,
            "endcolumn": 30,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 24,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 25,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 31,
            "column": 30
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 31,
            "column": 16
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 67,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 47,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 46,
            "column": 46
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 47,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 49,
            "column": 49
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 50,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 50,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 63,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 62,
            "column": 62
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 63,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 65,
            "column": 65
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 66,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 66,
            "column": 54
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 66,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 35,
            "column": 34
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 67,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 20,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 23,
            "column": 23
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 23,
            "column": 20
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 67,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 67,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 67,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 6,
            "endcolumn": 67,
            "column": 67
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 6,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 67,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 4,
            "stmt": [
                4,
                5,
                6,
                74
              ],
            "line": 4,
            "endcolumn": 15,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                32
              ],
            "line": 7,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                32
              ],
            "line": 7,
            "endcolumn": 32,
            "column": 28
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                32
              ],
            "line": 7,
            "endcolumn": 32,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 7,
            "stmt": [
                7,
                5,
                7,
                32
              ],
            "line": 7,
            "endcolumn": 19,
            "column": 5
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 21,
            "column": 19
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 22,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 31,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 41,
            "column": 39
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 35
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 15
          },
        {
            "module": "__main__",
            "endline": 8,
            "stmt": [
                8,
                9,
                8,
                42
              ],
            "line": 8,
            "endcolumn": 42,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 15,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 19,
            "column": 17
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 20,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 40,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 36,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 35,
            "column": 33
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 36,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 38,
            "column": 38
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 39,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 39,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 40,
            "column": 25
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 56,
            "column": 45
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 55,
            "column": 53
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 55,
            "column": 53
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 56,
            "column": 45
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 56,
            "column": 45
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 56,
            "column": 24
          },
        {
            "module": "__main__",
            "endline": 9,
            "stmt": [
                9,
                9,
                9,
                56
              ],
            "line": 9,
            "endcolumn": 22,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 19,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 23,
            "column": 21
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 24,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 26,
            "column": 26
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 27,
            "column": 13
          },
        {
            "module": "__main__",
            "endline": 10,
            "stmt": [
                10,
                9,
                10,
                27
              ],
            "line": 10,
            "endcolumn": 27,
            "column": 9
          },
        {
            "module": "__main__",
            "endline": 3,
            "stmt": [
                3,
                1,
                3,
                30
              ],
            "line": 3,
            "endcolumn": 30,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                12
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                12
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                12
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 8
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                12
              ],
            "line": 12,
            "endcolumn": 6,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                12
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 12,
            "stmt": [
                12,
                1,
                12,
                12
              ],
            "line": 12,
            "endcolumn": 12,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                1,
                1,
                13,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          },
        {
            "module": "__main__",
            "endline": 13,
            "stmt": [
                1,
                1,
                13,
                7
              ],
            "line": 1,
            "endcolumn": 7,
            "column": 1
          }
      ],
    "code": [
        {
            "args": "()",
            "name": "__init__",
            "op": "Frame"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": [
                {
                    "type": "atom",
                    "value": "current"
                  }
              ],
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 1
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 3
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "128",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "set",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "$accu28",
            "op": "StoreVar"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "Cut"
          },
        {
            "pc": "87",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "int",
                "value": 2
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "..",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "d",
            "op": "Cut"
          },
        {
            "pc": "84",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "!=",
            "op": "Nary"
          },
        {
            "pc": "40",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "==",
            "op": "Nary"
          },
        {
            "pc": "71",
            "cond": {
                "type": "bool",
                "value": "True"
              },
            "op": "JumpCond"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "<",
            "op": "Nary"
          },
        {
            "pc": "72",
            "op": "Jump"
          },
        {
            "value": {
                "type": "bool",
                "value": "True"
              },
            "op": "Push"
          },
        {
            "pc": "40",
            "cond": {
                "type": "bool",
                "value": "False"
              },
            "op": "JumpCond"
          },
        {
            "value": "$accu28",
            "op": "LoadVar"
          },
        {
            "value": "$accu28",
            "op": "DelVar"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": "s",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": "d",
            "op": "LoadVar"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "arity": 2,
            "value": "SetAdd",
            "op": "Nary"
          },
        {
            "value": "$accu28",
            "op": "StoreVar"
          },
        {
            "pc": "40",
            "op": "Jump"
          },
        {
            "value": "d",
            "op": "DelVar"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "pc": "34",
            "op": "Jump"
          },
        {
            "value": "s",
            "op": "DelVar"
          },
        {
            "value": "$accu28",
            "op": "LoadVar"
          },
        {
            "value": "$accu28",
            "op": "DelVar"
          },
        {
            "value": "moves",
            "op": "StoreVar"
          },
        {
            "value": "moves",
            "op": "LoadVar"
          },
        {
            "value": "moves",
            "op": "DelVar"
          },
        {
            "op": "Choose"
          },
        {
            "value": "(src, dst)",
            "op": "StoreVar"
          },
        {
            "value": "src",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "str",
            "op": "Nary"
          },
        {
            "value": {
                "type": "atom",
                "value": " -> "
              },
            "op": "Push"
          },
        {
            "value": "dst",
            "op": "LoadVar"
          },
        {
            "arity": 1,
            "value": "str",
            "op": "Nary"
          },
        {
            "arity": 3,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Print"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "dst",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "list",
                "value": [

                  ]
              },
            "op": "Push"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "src",
            "op": "LoadVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "ListAdd",
            "op": "Nary"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "dst",
            "op": "LoadVar"
          },
        {
            "value": "dst",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Load"
          },
        {
            "arity": 2,
            "value": "+",
            "op": "Nary"
          },
        {
            "op": "Store"
          },
        {
            "value": {
                "type": "address",
                "args": [
                    {
                        "type": "atom",
                        "value": "current"
                      }
                  ],
                "func": {
                    "type": "pc",
                    "value": "-1"
                  }
              },
            "op": "Push"
          },
        {
            "value": "src",
            "op": "LoadVar"
          },
        {
            "value": "src",
            "op": "DelVar"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "value": {
                "type": "int",
                "value": 0
              },
            "op": "Push"
          },
        {
            "arity": 2,
            "value": "AddArg",
            "op": "Nary"
          },
        {
            "op": "Del"
          },
        {
            "pc": "15",
            "op": "Jump"
          },
        {
            "lazy": "True",
            "op": "AtomicInc"
          },
        {
            "op": "ReadonlyInc"
          },
        {
            "value": {
                "type": "bool",
                "value": "False"
              },
            "op": "Push"
          },
        {
            "op": "Assert"
          },
        {
            "op": "ReadonlyDec"
          },
        {
            "op": "AtomicDec"
          },
        {
            "result": "result",
            "default": {
                "type": "address"
              },
            "op": "Return"
          },
        {
            "value": "result",
            "op": "DelVar"
          }
      ]
  },
  "macrosteps": [
    {
      "id": "1",
      "tid": "0",
      "shared": { },
      "name": "__init__()",
      "context": {
        "tid": "0",
        "hvalue": "7fabc4a83d4a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "0",
        "sp": "1",
        "stack": [{ "type": "list", "value": [] }],
        "trace": [
{"pc": "0","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Frame", "name": "__init__", "args": "()", "value": { "type": "list", "value": [] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Frame __init__()",
          "explain": "pop argument () and run method \"__init__\"",
          "explain2": { "text": "pop argument () and run method #+", "args": [ { "type": "atom", "value": "__init__" } ] },
          "npc": "1",
          "fp": "1",
          "trace": [
{"pc": "1","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "dict", "value": [] } ],
          "pc": "0"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "2",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "1"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "3",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "2"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "4",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "3"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "5",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "4"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "6",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "5"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "7",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "6"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "8",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "7"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "9",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "8"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([1, 2, 3], []); insert first value into the second; push result ([[1, 2, 3]])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } ] },
          "npc": "10",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } ],
          "pc": "9"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "11",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "10"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([], [[1, 2, 3]]); insert first value into the second; push result ([[1, 2, 3], []])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] } ] } ] },
          "npc": "12",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] } ] } ],
          "pc": "11"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "13",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "12"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values ([], [[1, 2, 3], []]); insert first value into the second; push result ([[1, 2, 3], [], []])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] } ] }, { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [] } ] } ] },
          "npc": "14",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [] } ] } ],
          "pc": "13"
        },

        {
          "code": "Store current",
          "explain": "pop value ([[1, 2, 3], [], []]) and store into variable current",
          "explain2": { "text": "pop value (#+) and store into variable #@", "args": [ { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [] } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [] } ] } },
          "npc": "15",
          "pop": "1",
          "push": [ ],
          "pc": "14"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], []); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1, 2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1, 2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1, 2, 3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1, 2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [0]); insert first value into the second; push result ([0, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 1], {}); insert first value into the second; push result ({ [0, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1, 2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [0]); insert first value into the second; push result ([0, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 2], { [0, 1] }); insert first value into the second; push result ({ [0, 1], [0, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [0, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [0, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [0, 1], [0, 2] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [0, 1], [0, 2] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabb57006aa": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabb57006aa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "3",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabb57006aa",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [0, 1], [0, 2] }) with choice ([0, 2])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([0, 2]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "2" }, "src": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (0); convert into a string; push result (\"0\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "0" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "0" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (2); convert into a string; push result (\"2\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "2" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "2" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"2\", \" -> \", \"0\"); concatenate the strings; push result (\"0 -> 2\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "2" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "0" }, { "type": "atom", "value": "0 -> 2" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "0 -> 2" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"0 -> 2\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "0 -> 2" } ] },
          "print": { "type": "atom", "value": "0 -> 2" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([], [1]); concatenate the lists; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "119",
          "pop": "1",
          "push": [ ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([1]) and address (?current[2]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2, 3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [0]); insert first value into the second; push result ([0, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 1], {}); insert first value into the second; push result ({ [0, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2, 3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [2]); insert first value into the second; push result ([2, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([2, 0], { [0, 1] }); insert first value into the second; push result ({ [0, 1], [2, 0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [2, 0] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [2, 0] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [2]); insert first value into the second; push result ([2, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([2, 1], { [0, 1], [2, 0] }); insert first value into the second; push result ({ [0, 1], [2, 0], [2, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [2, 0], [2, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [2, 0], [2, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [0, 1], [2, 0], [2, 1] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [0, 1], [2, 0], [2, 1] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabc7000b0a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabc7000b0a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "5",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabc7000b0a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [0, 1], [2, 0], [2, 1] }) with choice ([0, 1])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([0, 1]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "1" }, "src": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (0); convert into a string; push result (\"0\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "0" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "0" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (1) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (1); convert into a string; push result (\"1\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "1" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "1" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"1\", \" -> \", \"0\"); concatenate the strings; push result (\"0 -> 1\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "1" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "0" }, { "type": "atom", "value": "0 -> 1" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "0 -> 1" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"0 -> 1\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "0 -> 1" } ] },
          "print": { "type": "atom", "value": "0 -> 1" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (1) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (1) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([], [2]); concatenate the lists; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "119",
          "pop": "1",
          "push": [ ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([2]) and address (?current[1]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 2); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [1]); insert first value into the second; push result ([1, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([1, 0], {}); insert first value into the second; push result ({ [1, 0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [1, 0] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [1, 0] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [2]); insert first value into the second; push result ([2, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([2, 0], { [1, 0] }); insert first value into the second; push result ({ [1, 0], [2, 0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [1, 0], [2, 0] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [1, 0], [2, 0] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [2]); insert first value into the second; push result ([2, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([2, 1], { [1, 0], [2, 0] }); insert first value into the second; push result ({ [1, 0], [2, 0], [2, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [1, 0], [2, 0], [2, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [1, 0], [2, 0], [2, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [1, 0], [2, 0], [2, 1] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [1, 0], [2, 0], [2, 1] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabcb0007ea": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabcb0007ea",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "9",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabcb0007ea",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [1, 0], [2, 0], [2, 1] }) with choice ([2, 1])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([2, 1]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "1" }, "src": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (2) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (2); convert into a string; push result (\"2\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "2" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "2" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (1) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (1); convert into a string; push result (\"1\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "1" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "1" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"1\", \" -> \", \"2\"); concatenate the strings; push result (\"2 -> 1\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "1" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "2" }, { "type": "atom", "value": "2 -> 1" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "2 -> 1" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"2 -> 1\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "2 -> 1" } ] },
          "print": { "type": "atom", "value": "2 -> 1" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (1) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (2) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (1) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([2], [1]); concatenate the lists; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "119",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([1, 2]) and address (?current[1]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (2) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], []); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1, 2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [0]); insert first value into the second; push result ([0, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 2], {}); insert first value into the second; push result ({ [0, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [1]); insert first value into the second; push result ([1, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([1, 0], { [0, 2] }); insert first value into the second; push result ({ [0, 2], [1, 0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 2], [1, 0] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1, 2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 2], [1, 0] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([1, 2], { [0, 2], [1, 0] }); insert first value into the second; push result ({ [0, 2], [1, 0], [1, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 2], [1, 0], [1, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 2], [1, 0], [1, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [0, 2], [1, 0], [1, 2] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [0, 2], [1, 0], [1, 2] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabc70005ca": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabc70005ca",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "11",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabc70005ca",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [0, 2], [1, 0], [1, 2] }) with choice ([0, 2])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([0, 2]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "2" }, "src": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (0); convert into a string; push result (\"0\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "0" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "0" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (2); convert into a string; push result (\"2\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "2" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "2" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"2\", \" -> \", \"0\"); concatenate the strings; push result (\"0 -> 2\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "2" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "0" }, { "type": "atom", "value": "0 -> 2" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "0 -> 2" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"0 -> 2\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "0 -> 2" } ] },
          "print": { "type": "atom", "value": "0 -> 2" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, []); insert first value into the second; push result ([3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([], [3]); concatenate the lists; push result ([3])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "119",
          "pop": "1",
          "push": [ ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([3]) and address (?current[2]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [1]); insert first value into the second; push result ([1, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([1, 0], {}); insert first value into the second; push result ({ [1, 0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [1, 0] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1, 2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1, 2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [1, 0] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([1, 2], { [1, 0] }); insert first value into the second; push result ({ [1, 0], [1, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [1, 0], [1, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [1, 0], [1, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, [2]); insert first value into the second; push result ([2, 0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([2, 0], { [1, 0], [1, 2] }); insert first value into the second; push result ({ [1, 0], [1, 2], [2, 0] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [1, 0], [1, 2], [2, 0] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([1, 2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1, 2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [1, 0], [1, 2], [2, 0] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [1, 0], [1, 2], [2, 0] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [1, 0], [1, 2], [2, 0] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabcb00040a": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabcb00040a",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "14",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabcb00040a",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [1, 0], [1, 2], [2, 0] }) with choice ([1, 0])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([1, 0]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "0" }, "src": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (1) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (1); convert into a string; push result (\"1\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "1" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "1" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (0) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (0); convert into a string; push result (\"0\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "0" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "0" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"0\", \" -> \", \"1\"); concatenate the strings; push result (\"1 -> 0\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "0" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "1" }, { "type": "atom", "value": "1 -> 0" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "1 -> 0" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"1 -> 0\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "1 -> 0" } ] },
          "print": { "type": "atom", "value": "1 -> 0" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (0) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (1) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (0) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([], [1]); concatenate the lists; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "119",
          "pop": "1",
          "push": [ ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([1]) and address (?current[0]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (1) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [0]); insert first value into the second; push result ([0, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 1], {}); insert first value into the second; push result ({ [0, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [0]); insert first value into the second; push result ([0, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 2], { [0, 1] }); insert first value into the second; push result ({ [0, 1], [0, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [0, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 2); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [0, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([1, 2], { [0, 1], [0, 2] }); insert first value into the second; push result ({ [0, 1], [0, 2], [1, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [0, 2], [1, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([2])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (3)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "3" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (3, 3); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "int", "value": "3" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [0, 2], [1, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [0, 1], [0, 2], [1, 2] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [0, 1], [0, 2], [1, 2] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabcd0004aa": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabcd0004aa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "18",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabcd0004aa",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [0, 1], [0, 2], [1, 2] }) with choice ([1, 2])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([1, 2]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "2" }, "src": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (1) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (1); convert into a string; push result (\"1\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "1" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "1" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (2); convert into a string; push result (\"2\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "2" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "2" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"2\", \" -> \", \"1\"); concatenate the strings; push result (\"1 -> 2\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "2" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "1" }, { "type": "atom", "value": "1 -> 2" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "1 -> 2" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"1 -> 2\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "1 -> 2" } ] },
          "print": { "type": "atom", "value": "1 -> 2" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (1) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([3], [2]); concatenate the lists; push result ([2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "119",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([2, 3]) and address (?current[2]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (1) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[1]); push result (?current[1][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (True), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "28",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "Push {}",
          "explain": "initialize accumulator for set comprehension: push constant {}",
          "explain2": { "text": "initialize accumulator for set comprehension: push constant {}", "args": [] },
          "npc": "29",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "28"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({}) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [] } ] },
          "npc": "30",
          "local": { "$accu28": { "type": "set", "value": [] } },
          "pop": "1",
          "push": [ ],
          "pc": "29"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "31",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "30"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "32",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "31"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "33",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "32"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "34",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "33"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to s; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 1); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [] }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({}) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [0]); insert first value into the second; push result ([0, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 1], {}); insert first value into the second; push result ({ [0, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [1]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2, 3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 1); check if second value is less than the first; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (0) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (0, []); insert first value into the second; push result ([0])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [0]); insert first value into the second; push result ([0, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([0, 2], { [0, 1] }); insert first value into the second; push result ({ [0, 1], [0, 2] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [0, 2] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to s; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "1" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (1) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], []); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "False" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "1" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to s; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to s; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "35",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (True), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "36",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "37",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "36"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "38",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "37"
        },

        {
          "code": "2-ary ..",
          "explain": "pop 2 values (2, 0); range of integers; push result ({ 0, 1, 2 })",
          "explain2": { "text": "pop 2 values (#+, #+); range of integers; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "39",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "38"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "40",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "39"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (0) and value ({ 0, 1, 2 }); assign value (0) to d; push new index (1) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (1) and True", "args": [ { "type": "int", "value": "0" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "0" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "0" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "1" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0]) and push value ([1])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [1]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (0) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (1, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (1) and value ({ 0, 1, 2 }); assign value (1) to d; push new index (2) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (2) and True", "args": [ { "type": "int", "value": "1" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "2" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (1, ?current); push result (?current[1])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[1]) and push value ([])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], []); check if both values are the same; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "bool", "value": "True" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (True), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "True" } ] },
          "npc": "71",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push True",
          "explain": "push constant True",
          "explain2": { "text": "push constant True", "args": [] },
          "npc": "72",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "71"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "73",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [0, 2] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "74",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] } ],
          "pc": "73"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "75",
          "local": { "d": { "type": "int", "value": "1" }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "74"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "76",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "75"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "77",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "76"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, []); insert first value into the second; push result ([2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ] },
          "npc": "78",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" } ] } ],
          "pc": "77"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (1) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "1" }, { "type": "atom", "value": "d" } ] },
          "npc": "79",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "78"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "80",
          "local": { "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "79"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, [2]); insert first value into the second; push result ([2, 1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [{ "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] },
          "npc": "81",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ],
          "pc": "80"
        },

        {
          "code": "2-ary SetAdd",
          "explain": "pop 2 values ([2, 1], { [0, 1], [0, 2] }); insert first value into the second; push result ({ [0, 1], [0, 2], [2, 1] })",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "82",
          "pop": "2",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "81"
        },

        {
          "code": "StoreVar $accu28",
          "explain": "pop value ({ [0, 1], [0, 2], [2, 1] }) and store locally in variable \\\"$accu28\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"$accu28\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "83",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ ],
          "pc": "82"
        },

        {
          "code": "Jump 40",
          "explain": "set program counter to 40",
          "explain2": { "text": "set program counter to 40", "args": [] },
          "npc": "40",
          "push": [ ],
          "pc": "83"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (2) and value ({ 0, 1, 2 }); assign value (2) to d; push new index (3) and True",
          "explain2": { "text": "pop index (#+) and value (#+); assign value (#+) to d; push new index (3) and True", "args": [ { "type": "int", "value": "2" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "42",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "d": { "type": "int", "value": "2" }, "s": { "type": "int", "value": "2" } },
          "pop": "1",
          "push": [ { "type": "int", "value": "3" }, { "type": "bool", "value": "True" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (True), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "43",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "44",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "43"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "45",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "44"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "46",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "45"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "47",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "46"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "48",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "47"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([], [2, 3]); check if the values are unequal; push result (True)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "True" } ] },
          "npc": "49",
          "pop": "2",
          "push": [ { "type": "bool", "value": "True" } ],
          "pc": "48"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (True), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "True" }, { "type": "bool", "value": "False" } ] },
          "npc": "50",
          "pop": "1",
          "push": [ ],
          "pc": "49"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "51",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "50"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "52",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "51"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "53",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "52"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "54",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "53"
        },

        {
          "code": "Push ()",
          "explain": "push constant ()",
          "explain2": { "text": "push constant ()", "args": [] },
          "npc": "55",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "54"
        },

        {
          "code": "2-ary ==",
          "explain": "pop 2 values ([], [2, 3]); check if both values are the same; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if both values are the same; push result (#+)", "args": [ { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "56",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "55"
        },

        {
          "code": "JumpCond True 71",
          "explain": "pop value (False), compare to True, and jump to 71 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 71 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "True" } ] },
          "npc": "57",
          "pop": "1",
          "push": [ ],
          "pc": "56"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "58",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "57"
        },

        {
          "code": "LoadVar s",
          "explain": "push value (2) of variable \"s\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "s" } ] },
          "npc": "59",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "58"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "60",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "59"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "61",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "60"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "62",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "61"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "63",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "62"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "64",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "63"
        },

        {
          "code": "LoadVar d",
          "explain": "push value (2) of variable \"d\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "d" } ] },
          "npc": "65",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "64"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "66",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "65"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "67",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "66"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[2]); push result (?current[2][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "68",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] } ],
          "pc": "67"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2][0]) and push value (2)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "2" } ] },
          "npc": "69",
          "pop": "1",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "68"
        },

        {
          "code": "2-ary <",
          "explain": "pop 2 values (2, 2); check if second value is less than the first; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if second value is less than the first; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "int", "value": "2" }, { "type": "bool", "value": "False" } ] },
          "npc": "70",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "69"
        },

        {
          "code": "Jump 72",
          "explain": "set program counter to 72",
          "explain2": { "text": "set program counter to 72", "args": [] },
          "npc": "72",
          "push": [ ],
          "pc": "70"
        },

        {
          "code": "JumpCond False 40",
          "explain": "pop value (False), compare to False, and jump to 40 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 40 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "40",
          "pop": "1",
          "push": [ ],
          "pc": "72"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "41",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, "s": { "type": "int", "value": "2" } },
          "push": [ ],
          "pc": "40"
        },

        {
          "code": "Cut(d)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "42",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "41"
        },

        {
          "code": "JumpCond False 84",
          "explain": "pop value (False), compare to False, and jump to 84 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 84 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "84",
          "pop": "1",
          "push": [ ],
          "pc": "42"
        },

        {
          "code": "DelVar d",
          "explain": "delete method variable d",
          "explain2": { "text": "delete method variable d", "args": [] },
          "npc": "85",
          "push": [ ],
          "pc": "84"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "86",
          "local": { "$accu28": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "push": [ ],
          "pc": "85"
        },

        {
          "code": "Jump 34",
          "explain": "set program counter to 34",
          "explain2": { "text": "set program counter to 34", "args": [] },
          "npc": "34",
          "push": [ ],
          "pc": "86"
        },

        {
          "code": "Cut(s)",
          "explain": "pop index (3) and value ({ 0, 1, 2 }); out of range -> push False",
          "explain2": { "text": "pop index (#+) and value (#+); out of range -> push False", "args": [ { "type": "int", "value": "3" }, { "type": "set", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "35",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "34"
        },

        {
          "code": "JumpCond False 87",
          "explain": "pop value (False), compare to False, and jump to 87 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 87 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "87",
          "pop": "1",
          "push": [ ],
          "pc": "35"
        },

        {
          "code": "DelVar s",
          "explain": "delete method variable s",
          "explain2": { "text": "delete method variable s", "args": [] },
          "npc": "88",
          "push": [ ],
          "pc": "87"
        },

        {
          "code": "LoadVar $accu28",
          "explain": "push value ({ [0, 1], [0, 2], [2, 1] }) of variable \"$accu28\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "$accu28" } ] },
          "npc": "89",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "88"
        },

        {
          "code": "DelVar $accu28",
          "explain": "delete method variable $accu28",
          "explain2": { "text": "delete method variable $accu28", "args": [] },
          "npc": "90",
          "local": { },
          "push": [ ],
          "pc": "89"
        },

        {
          "code": "StoreVar moves",
          "explain": "pop value ({ [0, 1], [0, 2], [2, 1] }) and store locally in variable \\\"moves\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"moves\"", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ] },
          "npc": "91",
          "local": { "moves": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "pop": "1",
          "push": [ ],
          "pc": "90"
        },

        {
          "code": "LoadVar moves",
          "explain": "push value ({ [0, 1], [0, 2], [2, 1] }) of variable \"moves\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "atom", "value": "moves" } ] },
          "npc": "92",
          "push": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } ],
          "pc": "91"
        },

        {
          "code": "DelVar moves",
          "explain": "delete method variable moves",
          "explain2": { "text": "delete method variable moves", "args": [] },
          "npc": "93",
          "local": { },
          "push": [ ],
          "pc": "92"
        }

      ],
      "ctxbag": {
          "7fabcd0001aa": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabcd0001aa",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "93",
          "sp": "2",
          "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }],
          "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "atomic": "1",
          "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
          "mode": "choosing"
        }
      ]
    },
    {
      "id": "25",
      "tid": "0",
      "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } },
      "name": "__init__()",
      "choice": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] },
      "context": {
        "tid": "0",
        "hvalue": "7fabcd0001aa",
        "fp": "1",
        "id": "0",
        "name": "__init__()",
        "entry": "0",
        "pc": "93",
        "sp": "2",
        "stack": [{ "type": "dict", "value": [] }, { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }],
        "trace": [
{"pc": "93","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
        ],
        "atomic": "1",
        "next": { "type": "Choose", "value": { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] } },
        "mode": "runnable"
      },
      "microsteps": [
        {
          "code": "Choose",
          "explain": "replace top of stack ({ [0, 1], [0, 2], [2, 1] }) with choice ([0, 2])",
          "explain2": { "text": "replace top of stack (#+) with choice (#+)", "args": [ { "type": "set", "value": [{ "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "1" } ] } ] }, { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "choose": { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] },
          "npc": "94",
          "fp": "1",
          "trace": [
{"pc": "94","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ],
          "pc": "93"
        },

        {
          "code": "StoreVar (src, dst)",
          "explain": "pop value ([0, 2]) and store locally in variable \\\"(src, dst)\\\"",
          "explain2": { "text": "pop value (#+) and store locally in variable \"(src, dst)\"", "args": [ { "type": "list", "value": [{ "type": "int", "value": "0" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "95",
          "local": { "dst": { "type": "int", "value": "2" }, "src": { "type": "int", "value": "0" } },
          "pop": "1",
          "push": [ ],
          "pc": "94"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "96",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "95"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (0); convert into a string; push result (\"0\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "0" } ] },
          "npc": "97",
          "pop": "1",
          "push": [ { "type": "atom", "value": "0" } ],
          "pc": "96"
        },

        {
          "code": "Push \" -> \"",
          "explain": "push constant \" -> \"",
          "explain2": { "text": "push constant \" -> \"", "args": [] },
          "npc": "98",
          "push": [ { "type": "atom", "value": " -> " } ],
          "pc": "97"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "99",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "98"
        },

        {
          "code": "1-ary str",
          "explain": "pop a value (2); convert into a string; push result (\"2\")",
          "explain2": { "text": "pop a value (#+); convert into a string; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "2" } ] },
          "npc": "100",
          "pop": "1",
          "push": [ { "type": "atom", "value": "2" } ],
          "pc": "99"
        },

        {
          "code": "3-ary +",
          "explain": "pop 3 values (\"2\", \" -> \", \"0\"); concatenate the strings; push result (\"0 -> 2\")",
          "explain2": { "text": "pop 3 values (#+, #+, #+); concatenate the strings; push result (#+)", "args": [ { "type": "atom", "value": "2" }, { "type": "atom", "value": " -> " }, { "type": "atom", "value": "0" }, { "type": "atom", "value": "0 -> 2" } ] },
          "npc": "101",
          "pop": "3",
          "push": [ { "type": "atom", "value": "0 -> 2" } ],
          "pc": "100"
        },

        {
          "code": "Print",
          "explain": "pop value (\"0 -> 2\") and add to print log",
          "explain2": { "text": "pop value (#+) and add to print log", "args": [ { "type": "atom", "value": "0 -> 2" } ] },
          "print": { "type": "atom", "value": "0 -> 2" },
          "npc": "102",
          "pop": "1",
          "push": [ ],
          "pc": "101"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "103",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "102"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "104",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "103"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "105",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "104"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "106",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "105"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "107",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "106"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "108",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "107"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "109",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "108"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "110",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "109"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "111",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "110"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[0][0]) and push value (1)",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] }, { "type": "int", "value": "1" } ] },
          "npc": "112",
          "pop": "1",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "111"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "113",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "112"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "114",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "113"
        },

        {
          "code": "LoadVar dst",
          "explain": "push value (2) of variable \"dst\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "2" }, { "type": "atom", "value": "dst" } ] },
          "npc": "115",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "114"
        },

        {
          "code": "DelVar dst",
          "explain": "delete method variable dst",
          "explain2": { "text": "delete method variable dst", "args": [] },
          "npc": "116",
          "local": { "src": { "type": "int", "value": "0" } },
          "push": [ ],
          "pc": "115"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "117",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "116"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "118",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "117"
        },

        {
          "code": "2-ary +",
          "explain": "pop 2 values ([2, 3], [1]); concatenate the lists; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); concatenate the lists; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "119",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "118"
        },

        {
          "code": "Store",
          "explain": "pop value ([1, 2, 3]) and address (?current[2]) and store",
          "explain2": { "text": "pop value (#+) and address (#+) and store", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } },
          "npc": "120",
          "pop": "2",
          "push": [ ],
          "pc": "119"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "121",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "120"
        },

        {
          "code": "LoadVar src",
          "explain": "push value (0) of variable \"src\"",
          "explain2": { "text": "push value (#+) of variable #+", "args": [ { "type": "int", "value": "0" }, { "type": "atom", "value": "src" } ] },
          "npc": "122",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "121"
        },

        {
          "code": "DelVar src",
          "explain": "delete method variable src",
          "explain2": { "text": "delete method variable src", "args": [] },
          "npc": "123",
          "local": { },
          "push": [ ],
          "pc": "122"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current); push result (?current[0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "124",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] } ],
          "pc": "123"
        },

        {
          "code": "Push 0",
          "explain": "push constant 0",
          "explain2": { "text": "push constant 0", "args": [] },
          "npc": "125",
          "push": [ { "type": "int", "value": "0" } ],
          "pc": "124"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (0, ?current[0]); push result (?current[0][0])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "0" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ] },
          "npc": "126",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "0" }, { "type": "int", "value": "0" } ] } ],
          "pc": "125"
        },

        {
          "code": "Del",
          "explain": "pop an address and delete the shared variable at the address",
          "explain2": { "text": "pop an address and delete the shared variable at the address", "args": [] },
          "shared": { "current": { "type": "list", "value": [{ "type": "list", "value": [] }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] } },
          "npc": "127",
          "pop": "1",
          "push": [ ],
          "pc": "126"
        },

        {
          "code": "Jump 15",
          "explain": "set program counter to 15",
          "explain2": { "text": "set program counter to 15", "args": [] },
          "npc": "15",
          "push": [ ],
          "pc": "127"
        },

        {
          "code": "Push ?current",
          "explain": "push constant ?current",
          "explain2": { "text": "push constant ?current", "args": [] },
          "npc": "16",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] } ],
          "pc": "15"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "17",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "16"
        },

        {
          "code": "2-ary AddArg",
          "explain": "pop 2 values (2, ?current); push result (?current[2])",
          "explain2": { "text": "pop 2 values (#+, #+); push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" } ] }, { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "18",
          "pop": "2",
          "push": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] } ],
          "pc": "17"
        },

        {
          "code": "Load",
          "explain": "pop address (?current[2]) and push value ([1, 2, 3])",
          "explain2": { "text": "pop address (#+) and push value (#+)", "args": [ { "type": "address", "func": { "type": "pc", "value": "-1" }, "args": [{ "type": "atom", "value": "current" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "19",
          "pop": "1",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "18"
        },

        {
          "code": "Push ()",
          "explain": "building a tuple: push constant ()",
          "explain2": { "text": "building a tuple: push constant ()", "args": [] },
          "npc": "20",
          "push": [ { "type": "list", "value": [] } ],
          "pc": "19"
        },

        {
          "code": "Push 1",
          "explain": "push constant 1",
          "explain2": { "text": "push constant 1", "args": [] },
          "npc": "21",
          "push": [ { "type": "int", "value": "1" } ],
          "pc": "20"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (1, []); insert first value into the second; push result ([1])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "1" }, { "type": "list", "value": [] }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ] },
          "npc": "22",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" } ] } ],
          "pc": "21"
        },

        {
          "code": "Push 2",
          "explain": "push constant 2",
          "explain2": { "text": "push constant 2", "args": [] },
          "npc": "23",
          "push": [ { "type": "int", "value": "2" } ],
          "pc": "22"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (2, [1]); insert first value into the second; push result ([1, 2])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "2" }, { "type": "list", "value": [{ "type": "int", "value": "1" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ] },
          "npc": "24",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] } ],
          "pc": "23"
        },

        {
          "code": "Push 3",
          "explain": "push constant 3",
          "explain2": { "text": "push constant 3", "args": [] },
          "npc": "25",
          "push": [ { "type": "int", "value": "3" } ],
          "pc": "24"
        },

        {
          "code": "2-ary ListAdd",
          "explain": "pop 2 values (3, [1, 2]); insert first value into the second; push result ([1, 2, 3])",
          "explain2": { "text": "pop 2 values (#+, #+); insert first value into the second; push result (#+)", "args": [ { "type": "int", "value": "3" }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ] },
          "npc": "26",
          "pop": "2",
          "push": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] } ],
          "pc": "25"
        },

        {
          "code": "2-ary !=",
          "explain": "pop 2 values ([1, 2, 3], [1, 2, 3]); check if the values are unequal; push result (False)",
          "explain2": { "text": "pop 2 values (#+, #+); check if the values are unequal; push result (#+)", "args": [ { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "list", "value": [{ "type": "int", "value": "1" }, { "type": "int", "value": "2" }, { "type": "int", "value": "3" } ] }, { "type": "bool", "value": "False" } ] },
          "npc": "27",
          "pop": "2",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "26"
        },

        {
          "code": "JumpCond False 128",
          "explain": "pop value (False), compare to False, and jump to 128 if the same",
          "explain2": { "text": "pop value (#+), compare to #+, and jump to 128 if the same", "args": [ { "type": "bool", "value": "False" }, { "type": "bool", "value": "False" } ] },
          "npc": "128",
          "pop": "1",
          "push": [ ],
          "pc": "27"
        },

        {
          "code": "AtomicInc(lazy)",
          "explain": "increment atomic counter from 1 to 2: remains atomic",
          "explain2": { "text": "increment atomic counter from 1 to 2: remains atomic", "args": [ ] },
          "npc": "129",
          "atomic": "2",
          "push": [ ],
          "pc": "128"
        },

        {
          "code": "ReadonlyInc",
          "explain": "increment readonly counter from 0 to 1: becomes readonly",
          "explain2": { "text": "increment readonly counter from 0 to 1: becomes readonly", "args": [ ] },
          "npc": "130",
          "readonly": "1",
          "push": [ ],
          "pc": "129"
        },

        {
          "code": "Push False",
          "explain": "push constant False",
          "explain2": { "text": "push constant False", "args": [] },
          "npc": "131",
          "push": [ { "type": "bool", "value": "False" } ],
          "pc": "130"
        },

        {
          "code": "Assert",
          "explain": "pop a value (False) and raise exception",
          "explain2": { "text": "pop a value (False) and raise exception", "args": [ ] },
          "npc": "131",
          "failure": "Harmony assertion failed",
          "mode": "failed",
          "pop": "1",
          "push": [ ],
          "pc": "131"
        }

      ],
      "ctxbag": {
          "7fabc90004ca": "1"
      },
      "contexts": [
        {
          "tid": "0",
          "hvalue": "7fabc90004ca",
          "fp": "1",
          "id": "0",
          "name": "__init__()",
          "entry": "0",
          "pc": "131",
          "sp": "1",
          "stack": [{ "type": "dict", "value": [] }],
          "trace": [
{"pc": "131","xpc": "0","method_name": { "type": "atom", "value": "__init__" },
"method_arg": { "type": "list", "value": [] },
"method": "__init__()","calltype": "process","vars":{ },"sp": 0}
          ],
          "failure": "Harmony assertion failed",
          "this": { "type": "dict", "value": [] },
          "atomic": "2",
          "readonly": "1",
          "mode": "failed"
        }
      ]
    }

  ]
}
