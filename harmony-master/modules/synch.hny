import list
import bag

def tas(lk):
    atomic:
        result = !lk
        !lk = True

def BinSema(acquired):
    result = acquired

def Lock():
    result = BinSema(False)

def acquired(binsema):
    result = !binsema

def acquire(binsema):
    await not tas(binsema)

def release(binsema):
    atomic:
        assert !binsema
        !binsema = False
    
def held(binsema):
    result = !binsema

def Condition(lk):
    result = bag.empty()

def wait(c, lk):
    let blocked, cnt, ctx = True, 0, get_context():
        atomic:
            cnt = bag.count(!c, ctx)
            bag.add(c, ctx)
            !lk = False
        while blocked:
            atomic:
                if (not !lk) and (bag.count(!c, ctx) <= cnt):
                    !lk = True
                    blocked = False

def notify(c):
    atomic:
        if !c != bag.empty():
            bag.remove(c, bag.bchoose(!c))

def notifyAll(c):
    !c = bag.empty()

def Semaphore(cnt):
    result = cnt

def P(sema):
    let blocked = True:
        while blocked:
            atomic:
                if !sema > 0:
                    !sema -= 1
                    blocked = False
def V(sema):
    atomic: !sema += 1
    
def Queue():
    result = []

def get(q):
    let blocked = True:
        while blocked:
            atomic:
                if !q != []:
                    result = list.head(!q)
                    !q = list.tail(!q)
                    blocked = False

def put(q, item):
    atomic: !q = list.append(!q, item)
